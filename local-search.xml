<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>兰亭序</title>
    <link href="/2021/10/03/%E5%85%B0%E4%BA%AD%E5%BA%8F/"/>
    <url>/2021/10/03/%E5%85%B0%E4%BA%AD%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><img src="/%E5%85%B0%E4%BA%AD%E5%BA%8F/calligraphy.jpg" alt="calligraphy"></p>]]></content>
    
    
    <categories>
      
      <category>书法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兰亭序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>猫这一辈子</title>
    <link href="/2021/10/02/%E7%8C%AB%E8%BF%99%E4%B8%80%E8%BE%88%E5%AD%90/"/>
    <url>/2021/10/02/%E7%8C%AB%E8%BF%99%E4%B8%80%E8%BE%88%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>今天，我在学校的后面发现了一只猫，起初，我惊异于它的声音，那是什么样的一种声音呢：短促、沙哑、充满敌意。然后我停下脚步，四下逡巡，终于在两丛绿植中间的一小块空地中发现了它，于是我蹲下身去，看着它（尽管我这样形容会显出我那一丝丝的傻气），看着这个小生灵，甚至由衷地感觉到我们本不该有这样的一次交集，假如我并没有停下脚步呢？–就像我通常那样做的、甚至于是大多数人通常那样做的，匆匆走开。但是我没有、起码这一次没有，于是乎，生命里另一种东西开始萌生了，一种存在、还是一段体验、或者只不过是一种妄想和错觉。</p><p>但是，总之，它摇晃着躯体，迈着小猫们特有的、灵巧的步子，掩映在绿植中间，随着它的时隐时现，可以发现它的两只眼睛也正在打量着我，我很开心地感觉到，至少有两个生灵在此时此刻是在用心地关注着彼此的，并且对彼此都感觉到了无限的好奇和内心中充斥着的单纯和良善。</p><p>……</p>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>一两重的善良</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>课外作业3-JavaAPI</title>
    <link href="/2021/10/01/article/"/>
    <url>/2021/10/01/article/</url>
    
    <content type="html"><![CDATA[<p>| 任课教师 | 赵阳 | 班级 | | 提交时间 |<br> |<br>| — | — | — | — | — | — |<br>| 任务名称 | JavaAPI |<br>| 提交要求 | 项目所在文件夹，命名：组号-姓名.rar |</p><p><strong>1. String</strong>** 类中的****getBytes()<strong><strong>方法的作用是</strong></strong>(     ) **</p><ol><li>将整数变成字符串 </li><li>将字符串变成字符数组 </li><li>将字符串变成字节数组 </li><li>获取字符串中字符的个数</li></ol><p><strong>2.</strong>  <strong>对字符串&quot;</strong>** ababcdabcdefg&quot; <strong><strong>使用</strong></strong> indexOf(&quot;a&quot;) <strong><strong>和</strong></strong> lastIndexOf(&quot;a&quot;) <strong><strong>的运行结果是</strong></strong> (     ) **</p><ol><li>a1,1 </li><li>0,6</li><li>0,0 </li><li>1,6   </li></ol><p><strong>3. **** 下面程序的运行结果是什么</strong>**(    )    **</p><p>public static void main(String[] args){  </p><p> String s1 = &quot;abc&quot;;   </p><p>String s2 = &quot;xyz&quot;; </p><p>show(s1,s2); </p><p>System.out.println(s1+&quot;—–&quot;+s2); </p><p>} </p><p>static void show(String s1,String s2){  </p><p> s1 = s2+s1+&quot;Q&quot;;    </p><p>  s2 = &quot;W&quot;+s1;    </p><p> } </p><ol><li>abc—–xyz </li><li>xyzabcQ—–xyzWabc </li><li>xyzabcQ—- xyzabcQWabc </li><li>xyzQ—-Wabc   </li></ol><p><strong>4. **** 对字符串的说法正确的是</strong>**(    ) **</p><ol><li>字符串是基本数据类型 </li><li>字符串值存储在栈内存中 </li><li>字符串值初始化后可以被改变 </li><li>字符串值一旦初始化就不会被改变</li></ol><p><strong>5.</strong>** 关于 <strong><strong>null</strong></strong> 和&quot;&quot;说法正确的是****(  ****ABD **** )        **</p><ol><li>null是常量</li><li>&quot;&quot;是字符串对象</li><li>null可以调用方法 </li><li>&quot;&quot;可以调用方法  </li></ol><p><strong>6. **** 关于 <strong><strong>String</strong></strong> 类的 <strong><strong>indexOf</strong></strong> 说法不正确的是</strong>**(  ****CD  **** ) **<img src="RackMultipart20211001-4-bud3bw_html_789fe5b88a603382.png"></p><ol><li>返回指定字符在字符串中第一次出现的索引 </li><li>返回指定子字符串在字符串第一次出现的索引 </li><li>返回指定字符在字符串中最后一次出现的索引 </li><li>返回指定子字符串在此字符串最后一次出现的索引</li></ol><p><strong>7. String</strong>** 类****charAt()****方法作用是 ****(  ****A ****   ) **<img src="RackMultipart20211001-4-bud3bw_html_46dac3ec2244a90a.png"></p><ol><li>返回指定索引处的字符 </li><li>返回指定索引出的字符串 </li><li>返回指定字符的索引 </li><li>返回指定字符串的索引   </li></ol><p><strong>8. **** 将字符串转成字符数组的方法是</strong>**(  ****B ****  ) **<img src="RackMultipart20211001-4-bud3bw_html_11189fc367c8fffb.png"></p><ol><li>toString() </li><li>toCharArray() </li><li>toUpperCase() </li><li>toLowerCase()   </li></ol><p><strong>9. StringBuffer</strong>** 字符串缓冲区的初始容量是多少个字符****(  **** D****  ) **<img src="RackMultipart20211001-4-bud3bw_html_12b56c1e2a80d73.png"></p><ol><li>10个 </li><li>12个</li><li>14个 </li><li>16个</li></ol><p><strong>10. **** 向字符串缓冲区中追加字符串，使用的方法是</strong>**(  **<strong>C  **** )</strong><img src="RackMultipart20211001-4-bud3bw_html_2fe79c4bae49c2c7.png"></p><ol><li> length() </li><li>delete()</li><li>append() </li><li>toString()</li></ol><p><strong>11. **** 关于 <strong><strong>StringBuffer</strong></strong> 和 <strong><strong>StringBuilder</strong></strong> 说法正确的是</strong>**( <strong><strong>C</strong></strong> )          **<img src="RackMultipart20211001-4-bud3bw_html_f9cba57884abdf5a.png"></p><ol><li>StringBuffer和StringBuilder的方法不同 </li><li>StringBuffer和StringBuilder都是线程安全的 </li><li>StringBuffer是线程安全的，StringBuilder不是线程安全的 </li><li>StringBuffer不是线程安全的，StringBuilder是线程安全的 </li></ol><p><strong>12. **** 下面哪个程序的运行结果是**<strong>true( **** C</strong></strong>  ) **</p><ol><li>System.out.println(&quot;abc&quot;.equals(&quot;Abc&quot;)); </li><li></li><li>System.out.println(&quot;&quot;.equals(null)); </li><li>System.out.println(&quot;abc&quot;==&quot;ab&quot;+&quot;c&quot;); </li><li>System.out.println(&quot;&quot;.equalsIgnoreCase(null));</li></ol><p>**13. **** 下面代码 &quot;****ibelieve&quot;.lastIndexOf(&quot;e&quot;) <strong><strong>的运行结果是</strong></strong>(  ****D **** ) **</p><ol><li>2 </li><li>5</li><li>-1 </li><li>7  </li></ol><p><strong>14. StringBuffer</strong>** 类中的****append()<strong><strong>方法描述正确的是</strong></strong>(  ****AC ****   ) **<img src="RackMultipart20211001-4-bud3bw_html_4b90016904d90a11.png"></p><ol><li>向缓冲区追加字符串数据 </li><li>将缓冲区中的字符串删除 </li><li>append()方法返回值类型是StringBuffer类型 </li><li>append()方法返回值类型是String类型   </li></ol><p><strong>15. **** 能切割字符串的方法是</strong>**(  ****C ****  ) **<img src="RackMultipart20211001-4-bud3bw_html_c74fdd4dadeee454.png"></p><ol><li>indexOf()</li><li>substring()</li><li>split() </li><li>trim() </li></ol><p><strong>16. **** 截取字符串的方法是</strong>**(  <strong><strong>D</strong></strong>   ) **</p><ol><li>replace() </li><li>toString()</li><li>substr()   </li><li>substring()</li></ol><p><strong>17.</strong>** 关于 <strong><strong>Math.PI</strong></strong> 说法正确的是****(  <strong><strong>AB</strong></strong>  ) **</p><ol><li>静态常量 </li><li>被final修饰 </li><li>Math.PI每次运行结果不一样</li><li>以上的说法都正确</li></ol><p><strong>18. **** 下面程序运行的结果是</strong>**( <strong><strong>C</strong></strong>   )   **<img src="RackMultipart20211001-4-bud3bw_html_5f034c98dbf5f7cb.png"> **       **</p><p>String str = &quot;abcdefg&quot;;  </p><p>str.substring(0,2);    </p><p>System.out.println(str);</p><ol><li>ab </li><li>abc   </li><li>abcdefg  </li><li>出现下标越界异常   </li></ol><p><strong>19. **** 下面程序的运行结果是</strong>**(  <strong><strong>C</strong></strong>  )      **</p><p>public static void main(String[] args){ </p><p>StringBuffer sb = new StringBuffer(); </p><p>sb.append(&quot;qq&quot;).append(&quot;ww&quot;); </p><p>show(sb,&quot;ss&quot;); </p><p>System.out.println(sb.length()); </p><p> }      </p><p>static void show(StringBuffer sb,String str){    </p><p>sb.append(str); </p><p> } </p><ol><li>4</li><li>2</li><li>6 </li><li>0</li></ol><p><strong>20. String</strong>** 类中的****substring()<strong><strong>方法描述正确的是</strong></strong>(  <strong><strong>AB</strong></strong>   ) **</p><ol><li>获取字符串中的一部分 </li><li>返回新的字符串 </li><li>返回新的字符串数组 </li><li>此方法没有返回值   </li></ol><p><strong>21. **** 下面程序运行的结果是</strong>**(  <strong><strong>D</strong></strong>   )    **</p><p>String str1=&quot;1&quot;,str2=&quot;2&quot;;</p><p><strong>if</strong> (str1==str2){</p><p>System.out.println(&quot;ABC&quot;);</p><p>} <strong>else</strong>** if**(str1&amp;lt;str2){</p><p>System.out.println(&quot;DEF&quot;);</p><p>} <strong>else</strong> {</p><p>System.out.println(&quot;GHI&quot;); </p><p>} </p><ol><li>ABC</li><li> DEF</li><li>GHJ </li><li>编译失败 </li></ol><p>*<em>22. **** 关于 <strong><strong>Integer</strong></strong> 类中的静态方法</em>***parseInt()<strong><strong>方法说法正确的是</strong></strong>(  <strong><strong>BC</strong></strong>   ) **<img src="RackMultipart20211001-4-bud3bw_html_b94f02642cae550f.png"></p><ol><li>将小数转换成整数 </li><li>将数字格式的字符串转成整数 </li><li>parseInt()方法永远不会抛出异常 </li><li>将单个字符转成整数  </li></ol><p><strong>23. **** 将十进制数 <strong><strong>100</strong></strong> 转成二进制数用哪个方法</strong>**(  <strong><strong>A</strong></strong>   ) **<img src="RackMultipart20211001-4-bud3bw_html_e820c86df18e27ff.png"></p><ol><li>toBinaryString() </li><li>toHexString()</li><li>intValue() </li><li>toOctalString()  </li></ol><p><strong>24. String</strong>** 类中****split()<strong><strong>方法描述正确的是</strong></strong>(  <strong><strong>AC</strong></strong>  ) **<img src="RackMultipart20211001-4-bud3bw_html_31538d94d141562.png"></p><ol><li>切割字符串 </li><li>返回一个新的字符串 </li><li>返回一个新的字符串数组 </li><li>此方法没有返回值</li></ol><p><strong>25.</strong>** 下面代码运行的结果是****(  <strong><strong>C</strong></strong>   )              **</p><p>Integer x = 3 ; //自动装箱   </p><p>x = x + 3;   //自动拆箱   </p><p>System.out.println(x); </p><ol><li>编译失败 </li><li>x3</li><li>6 </li><li>Null   </li></ol><p>**26. System.getProperties()<strong><strong>的作用是</strong></strong>(  <strong><strong>A</strong></strong> )         **</p><ol><li>获取当前的操作系统的属性 </li><li>获取当前JVM的属性 </li><li>获取指定键指示的操作系统属性 </li><li>获取指定键指示的JVM的属性   </li></ol><p>*<em>27. **** 下面所有描述 <strong><strong>String</strong></strong> 类中</em>***equals()<strong><strong>方法正确的是</strong></strong>( <strong><strong>ABC</strong></strong>  ) **<img src="RackMultipart20211001-4-bud3bw_html_64079e7894d7088a.png"></p><ol><li>equals()方式是覆盖Object类中的equals()方法 </li><li>equals()比较字符串中的内容，区分大小写 </li><li>equals()方法的的返回值是布尔类型 </li><li>以上说法都不正确   </li></ol><p><strong>28. **** 可以获取绝对值的方法是</strong>**(  <strong><strong>D</strong></strong>  ) **</p><ol><li>Math.ceil() </li><li>Math.floor()</li><li>Math.pow() </li><li>Math.abs()</li></ol><p>**29. Math.random()<strong><strong>说法正确的是</strong></strong>( <strong><strong>C</strong></strong>  ) **</p><ol><li>返回一个不确定的整数 </li><li>返回0或是1 </li><li>返回一个随机的double类型数，该数大于等于0.0小于1.0 </li><li>返回一个随机的int类型数，该数大于等于0.0小于1.0   </li></ol><p>**30. Math.ceil(-12.5)<strong><strong>运行结果是</strong></strong>(   <strong><strong>D</strong></strong>  )      **</p><ol><li>-13</li><li>-11</li><li>-12 </li><li>-12.0   </li></ol><p>**31. Math.floor(15.6)<strong><strong>运行结果是</strong></strong>(  <strong><strong>A</strong></strong>  )       **</p><ol><li>15.0</li><li>15</li><li>16.0 </li><li>16.6   </li></ol><p><strong>32. **** 在 <strong><strong>Random</strong></strong> 类中，可以生成 <strong><strong>100</strong></strong> 以内非负整数的随机数的方法是</strong>**(  <strong><strong>C</strong></strong>   ) **</p><ol><li>nextDouble() </li><li>nextFloat()</li><li>nextInt(100) </li><li>nextInt()</li></ol><p><strong>33. Date</strong>** 类中，哪个方法可以返回当前日期对象的毫秒值****(  ****B ****    ) **<img src="RackMultipart20211001-4-bud3bw_html_527a5eb26cb7eb3b.png"></p><ol><li>getSeconds()</li><li>getTime()</li><li>getDay() </li><li>getDate()   </li></ol><p><strong>34. **** 可以获取当前日期毫秒值的方法是</strong>**(  ****AB ****  ) **</p><ol><li>Date d = new Date();  d.getTime(); </li><li>long start = System.currentTimeMillis(); </li><li>Calendar中的getTime();  <img src="RackMultipart20211001-4-bud3bw_html_b3600b9ada84cf1a.png"></li><li>DateFormat中的getTime()   </li></ol><p><strong>35. DateFormat</strong>** 类中的****parse()<strong><strong>方法描述正确的是</strong></strong>(  <strong><strong>C</strong></strong>   ) **</p><ol><li>将毫秒值转成日期对象 </li><li>格式化日期对象 </li><li>将字符串转成日期对象 </li><li>将日期对象转成字符串   </li></ol><p><strong>36. **** 下面程序的运行结果是</strong>**( <strong><strong>D</strong></strong> )     **</p><p>String s1 = &quot;abc&quot;;     </p><p>String s2 = new String(&quot;abc&quot;);    </p><p>System.out.println(s1==s2);     </p><p>String s3 = &quot;你好吗&quot;;    </p><p>String s4 =&quot;你&quot;;    </p><p>String s5 =&quot;好吗&quot;;     </p><p>System.out.println(s3==(s4+s5))     </p><p>//s3==new  StringBuffer(s4).append(s5).toString(); </p><ol><li>true true </li><li>false true</li><li>true flase </li><li>false false   </li></ol><p><strong>37. **** 下面说法正确的是</strong>**(  <strong><strong>ACD</strong></strong>  )            **</p><ol><li>字符串缓冲区是为了提高字符串的操作效率 </li><li>StringBuilder是线程安全的 </li><li>StringBuffer是线程安全的 </li><li>String类的valueOf()方法可以将任意类型变成字符串 <img src="RackMultipart20211001-4-bud3bw_html_332111dea459fecc.png"></li></ol><p><strong>38.</strong>** 编写一个程序，将下面的一段文本中的各个单词的字母顺序翻转， &quot; <strong><strong>To be or not to be&quot;</strong></strong> ，将变成 <strong><strong>&quot;oT eb ro ton ot eb.&quot;</strong></strong> 。**</p><p><strong>39.</strong>** String s=&quot;name=zhangsan age=18 classNo=090728&quot;; **** 将上面的字符串拆分，结果如下 ****: zhangsan 18 090728**</p><p><strong>40.</strong>  <strong>要求编写一个用户注册程序，用户注册时，需要输入个人信息，利用字符串的相关方法验证输入信息，个人信息：用户名，密码，电话，</strong>** e-mail **<strong>，验证规则：</strong></p><p><strong>1</strong>** ）用户名，密码必须输入 <strong><strong>6</strong></strong> 位及 <strong><strong>6</strong></strong> 位以上**</p><p><strong>2</strong>** ） <strong><strong>密码，包含英文字母大小写，数字，特殊字符&quot;</strong></strong> @&quot; <strong><strong>或者&quot;</strong></strong>.&quot;**</p><ol><li><strong>电话，</strong>** 11 **<strong>位号码前三位可以是</strong>  177，176、185、181、178 <strong>，其他不符合就不能注册</strong></li><li><strong>e-mail</strong>** 格式有&quot; <strong><strong>@&quot;,&quot;.&quot;</strong></strong> 在中间位置，不可以在开头 <strong><strong>,</strong></strong> 要求&quot; <strong><strong>.&quot;</strong></strong> ，必须在&quot; <strong><strong>@&quot;</strong></strong> 后面。（正确的邮箱 <strong><a href="mailto:&#115;&#x6f;&#x6d;&#x65;&#x6f;&#110;&#x65;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#111;&#109;">&#115;&#x6f;&#x6d;&#x65;&#x6f;&#110;&#x65;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#111;&#109;</a></strong> ）**</li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java作业</tag>
      
      <tag>课外作业3</tag>
      
      <tag>Java API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/25/hello-world/"/>
    <url>/2021/09/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
