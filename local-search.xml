<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>思政考试模拟题</title>
    <link href="/2022/05/30/%E6%80%9D%E6%94%BF%E8%80%83%E8%AF%95%E6%A8%A1%E6%8B%9F%E9%A2%98/"/>
    <url>/2022/05/30/%E6%80%9D%E6%94%BF%E8%80%83%E8%AF%95%E6%A8%A1%E6%8B%9F%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ol><li>中国特色社会主义进入新时代，我国社会主要矛盾已经转化为人民日益增长的<em><strong>美好生活需要和不平衡不充分的发展</strong></em>之间的矛盾。</li><li>新时代推进中国特色社会主义事业的总体布局是“<em><strong>五位一体</strong></em>”</li><li>战略布局是“<strong><em>四个全面</em>”</strong></li><li><em><strong>战略思维</strong></em>是高瞻远瞩、统揽全局、善于把握事物发展总体趋势和方向的思维方法</li><li>我们党原来提出的“三步走”战略的第三步即基本实现现代化，将提前15年，即在<em><strong>2035年</strong></em>实现。</li><li><em><strong>习近平新时代中国特色社会主义经济思想</strong></em>是当代马克思主义政治经济学的集中体现，是中国特色社会主义政治经济学的最新成果。</li><li>习近平总书记指出，“<em><strong>社区</strong></em>是党和政府联系、服务居民群众的‘最后一公里’。</li><li>习近平同志强调，<em><strong>改革开放</strong></em>是当代中国发展进步的活力之源。</li><li>党的十九大报告指出，坚持总体国家安全观，必须坚持<em><strong>国家利益至上</strong></em>。</li><li>习近平：国家安全是安邦定国的重要基石，<em><strong>维护国家安全</strong></em>是全国各族人民根本利益所在。</li><li>保持香港、澳门长期繁荣稳定，必须全面准确贯彻‘一国两制’、‘港人治港’、‘澳人治澳’、<em><strong>高度自治</strong></em>的方针。</li><li>我们坚持<em><strong>爱国者</strong></em>为主体的“港人治港”、“澳人治澳”，让香港、澳门同胞同祖国人民共担民族复兴的历史责任、共享祖国繁荣富强的伟大荣光。</li><li>党的十九大再次强调：“中国将高举和平、发展、合作、共赢的旗帜，恪守<em><strong>维护世界和平、促进共同发展的外交政策宗旨</strong></em>。</li><li>习近平新时代中国特色社会主义思想的一个重要内容，弘扬和平、发展、公平、正义、民主、自由的<em><strong>全人类共同价值</strong></em>。</li><li>党的十八大报告鲜明揭示了中国特色社会主义是三位一体的：即<em><strong>中国特色社会主义道路、中国特色社会主义理论体系、中国特色社会主义制度</strong>；</em></li><li>新时代坚持和发展中国特色社会主义的总任务是<em><strong>实现社会主义现代化和中华民族伟大复兴</strong></em>。</li><li>中国梦的本质是<em><strong>国家富强、民族振兴、人民幸福</strong></em>。</li><li>实现中华民族伟大复兴的中国梦，必须弘扬中国精神，这就是<em><strong>以爱国主义为核心的民族精神和以改革创新为核心的时代精神</strong></em>。</li><li>深化供给侧结构性改革、推动高质量发展，管总的要求是<em><strong>巩固、增强、提升、畅通。</strong></em></li><li>检验我们一切工作的成效，最终都要看<em><strong>人民是否真正得到了实惠，人民生活是否真正得到了改善，人民权益是否真正得到了保障</strong></em>。</li><li>全面深化改革的总目标，是<em><strong>完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化</strong></em>。</li><li><em><strong>实现中华民族伟大复兴是近代以来中华民族最伟大的梦想</strong></em></li><li>制约我国经济发展的因素，供给和需求两侧都有，但矛盾的主要方面，在<em><strong>供给侧</strong></em>。</li><li>“德治”与“法治”二者之间既是<em><strong>相互区别,又是相互依存,相互促进</strong></em>的。</li><li>”一带“指的是“ 丝绸之路经济带 ”，”一路“指的是“ <em><strong>21世纪海上丝绸之路</strong></em>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思政</tag>
      
      <tag>考试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML相关问题</title>
    <link href="/2022/05/28/HTML%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/28/HTML%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML-table-标签"><a href="#HTML-table-标签" class="headerlink" title="HTML table 标签"></a>HTML table 标签</h1><p><strong>实例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Month<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Savings<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>January<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$100<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">border</td><td align="left"><em>pixels</em></td><td align="left">规定表格边框的宽度。</td></tr></tbody></table><h1 id="HTML-form标签-隐藏表单前后台传参"><a href="#HTML-form标签-隐藏表单前后台传参" class="headerlink" title="HTML form标签 隐藏表单前后台传参"></a>HTML form标签 隐藏表单前后台传参</h1><p><strong>HTML:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;deleteUserById&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>JAVA:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/deleteUserById&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id,Model model)</span></span>&#123;<br>    userService.deleteUserById(id);<br>    List&lt;User&gt; userList = userService.getAllUser();<br>    model.addAttribute(<span class="hljs-string">&quot;userList&quot;</span>,userList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>el和jstl表达式</title>
    <link href="/2022/05/27/el%E5%92%8Cjstl%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/05/27/el%E5%92%8Cjstl%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>el即Expression Language，用来在jsp页面上显示内容，jstl是JSP Standard Tag Library的缩写，包含多种标签，el和jstl结合使用，页面渲染更方便。</p><hr><h1 id="EL内置对象"><a href="#EL内置对象" class="headerlink" title="EL内置对象"></a>EL内置对象</h1><table><thead><tr><th align="left">内置对象</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">pageScope</td><td align="left">获取 page 范围的变量</td></tr><tr><td align="left">requestScope</td><td align="left">获取 request 范围的变量</td></tr><tr><td align="left">sessionScope</td><td align="left">获取 session 范围的变量</td></tr><tr><td align="left">applicationScope</td><td align="left">获取 application 范围的变量</td></tr><tr><td align="left">param</td><td align="left">相当于 request.getParameter(String name)，获取单个参数的值</td></tr><tr><td align="left">paramValues</td><td align="left">相当于 request.getParameterValues(String name)，获取参数集合中的变量值</td></tr><tr><td align="left">header</td><td align="left">相当于 request.getHeader(String name)，获取 HTTP 请求头信息</td></tr><tr><td align="left">headerValues</td><td align="left">相当于 request.getHeaders(String name)，获取 HTTP 请求头数组信息</td></tr><tr><td align="left">initParam</td><td align="left">相当于 application.getInitParameter(String name)，获取 web.xml 文件中的参数值</td></tr><tr><td align="left">cookie</td><td align="left">相当于 request.getCookies()，获取 cookie 中的值</td></tr><tr><td align="left">pageContext</td><td align="left">表示当前 JSP 页面的 pageContext 对象</td></tr></tbody></table><p>EL 表达式获取 4 种不同范围的属性，代码如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;编程帮(www.biancheng.net)&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;%<br>        pageContext.setAttribute(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;page属性范围&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;request属性范围&quot;</span>);<br>        session.setAttribute(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;session属性范围&quot;</span>);<br>        application.setAttribute(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;application属性范围&quot;</span>);<br>    %&gt;<br>    &lt;h2&gt;不同属性范围的值&lt;/h2&gt;<br>    &lt;hr /&gt;<br>    不指定范围：$&#123;info&#125;<br>    &lt;br&gt; page 属性内容：$&#123;pageScope.info&#125;<br>    &lt;br&gt; request 属性内容：$&#123;requestScope.info&#125;<br>    &lt;br&gt;session 属性内容：$&#123;sessionScope.info&#125;<br>    &lt;br&gt;application 属性内容：$&#123;applicationScope.info&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><hr><h1 id="jstl标签很多，笔记一下我常用到的标签"><a href="#jstl标签很多，笔记一下我常用到的标签" class="headerlink" title="jstl标签很多，笔记一下我常用到的标签"></a>jstl标签很多，笔记一下我常用到的标签</h1><p><strong>if</strong></p><p>语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;one.name eq &#x27;nick&#x27;&#125;&quot;</span>&gt;<br>                &lt;tr&gt;<br>                    &lt;td&gt;nick&lt;/td&gt;<br>                &lt;/tr&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br></code></pre></td></tr></table></figure><hr><p><strong>c:forEach标签</strong></p><p>语法:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:forEach item=<span class="hljs-string">&quot;collection&quot;</span> [<span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;varname&quot;</span> [varStatus=<span class="hljs-string">&quot;varstatusName&quot;</span>] [begin=<span class="hljs-string">&quot;开始&quot;</span>] [end=<span class="hljs-string">&quot;结束&quot;</span>] [step=<span class="hljs-string">&quot;step&quot;</span>]]&gt;<br>    Java程序或HTML代码<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><ul><li><em><strong>items：要被循环的信息，可以是数组、Java 集合等；</strong></em></li><li><em><strong>var：可选项，指定迭代之的别名；</strong></em></li></ul><h1 id="核心标签是最常用的-JSTL标签。引用核心标签库的语法如下："><a href="#核心标签是最常用的-JSTL标签。引用核心标签库的语法如下：" class="headerlink" title="核心标签是最常用的 JSTL标签。引用核心标签库的语法如下："></a>核心标签是最常用的 JSTL标签。引用核心标签库的语法如下：</h1><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>el表达式</tag>
      
      <tag>jstl表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot学习时遇到的问题</title>
    <link href="/2022/05/27/springboot%E5%AD%A6%E4%B9%A0%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/27/springboot%E5%AD%A6%E4%B9%A0%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot项目搭建"><a href="#SpringBoot项目搭建" class="headerlink" title="SpringBoot项目搭建"></a>SpringBoot项目搭建</h1><ol><li><p>新建Empty Project</p></li><li><img src="https://s2.loli.net/2022/05/30/Cyv4Y3HZrsSbFQe.png" alt="image-20220530115230389" style="zoom:50%;"></li><li><p>新建module，Spring initializer创建springboot项目，</p><img src="https://s2.loli.net/2022/05/27/3VM5HAjuWw4zXvg.png" alt="image-20220527161537443" style="zoom:50%;"><img src="https://s2.loli.net/2022/05/27/gYOQfCuxW25Sjri.png" alt="image-20220527161624866" style="zoom:50%;"></li><li><p>导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入lombok--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入外部tomcat的支持--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入标签库的支持--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 不引入这个访问jsp页面会报404错误--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--热部署依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--pagehelper分页的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>生成webApp文件夹和Web.xml文件</p></li><li><p>配置application.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">spring.datasource.username=root<br>spring.datasource.password=<br>spring.datasource.url=jdbc:mysql://localhost:3306/userManager?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC<br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br><br>spring.mvc.view.prefix=/WEB-INF/jsp/<br>spring.mvc.view.suffix=.jsp<br></code></pre></td></tr></table></figure><p>或者选择application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#配置数据源</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/movie?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>  <span class="hljs-comment">#配置视图解析器</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">view:</span><br>      <span class="hljs-attr">suffix:</span> <span class="hljs-string">.jsp</span><br>      <span class="hljs-attr">prefix:</span> <span class="hljs-string">/jsp/</span><br><span class="hljs-comment">#配置mapper的存放路径以及实体类别名</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.ruanyuan.pojo</span><br>  <span class="hljs-attr">config-location:</span> <span class="hljs-string">classpath:mybatis-config.xml</span><br></code></pre></td></tr></table></figure></li><li><p>环境配置基本完毕。</p></li></ol><h1 id="怎么将html转换为jsp"><a href="#怎么将html转换为jsp" class="headerlink" title="怎么将html转换为jsp"></a>怎么将html转换为jsp</h1><ol><li><p>直接在原testPage.html页面最顶端添加如下代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br></code></pre></td></tr></table></figure></li><li><p>修改文件后缀名： 修改后缀名为<code>.jsp</code>，Ok即可。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql经典五十题相关问题</title>
    <link href="/2022/05/26/sql%E7%BB%8F%E5%85%B8%E4%BA%94%E5%8D%81%E9%A2%98%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/26/sql%E7%BB%8F%E5%85%B8%E4%BA%94%E5%8D%81%E9%A2%98%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/GodSuzzZ/article/details/106930311">MySQL 经典练习 50 题（完美解答版）</a></p><h1 id="sql中的join和inner-join的区别"><a href="#sql中的join和inner-join的区别" class="headerlink" title="sql中的join和inner join的区别"></a>sql中的join和inner join的区别</h1><p>join等同于inner join等同于where</p><h1 id="SQL-ROUND-函数"><a href="#SQL-ROUND-函数" class="headerlink" title="SQL ROUND() 函数"></a>SQL ROUND() 函数</h1><p>ROUND 函数用于把数值字段舍入为指定的小数位数。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT ROUND(column_name,decimals) FROM table_name<br></code></pre></td></tr></table></figure><p><strong>实例</strong></p><ol><li><p>我们拥有下面这个 “Products” 表：</p><table><thead><tr><th align="left">Prod_Id</th><th align="left">ProductName</th><th align="left">Unit</th><th align="left">UnitPrice</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">gold</td><td align="left">1000 g</td><td align="left">32.35</td></tr><tr><td align="left">2</td><td align="left">silver</td><td align="left">1000 g</td><td align="left">11.56</td></tr><tr><td align="left">3</td><td align="left">copper</td><td align="left">1000 g</td><td align="left">6.85</td></tr></tbody></table></li><li><p>现在，我们希望把名称和价格舍入为最接近的整数。</p><p>我们使用如下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ProductName, ROUND(UnitPrice,<span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> UnitPrice <span class="hljs-keyword">FROM</span> Products<br></code></pre></td></tr></table></figure></li><li><p>结果集类似这样：</p><table><thead><tr><th align="left">ProductName</th><th align="left">UnitPrice</th></tr></thead><tbody><tr><td align="left">gold</td><td align="left">32</td></tr><tr><td align="left">silver</td><td align="left">12</td></tr><tr><td align="left">copper</td><td align="left">7</td></tr></tbody></table></li></ol><hr><h1 id="MySQL-IFNULL函数简介"><a href="#MySQL-IFNULL函数简介" class="headerlink" title="MySQL IFNULL函数简介"></a>MySQL IFNULL函数简介</h1><p>它接受两个参数，如果不是<code>NULL</code>，则返回第一个参数。 否则，<code>IFNULL</code>函数返回第二个参数。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">IFNULL(expression_1,expression_2);<br></code></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> IFNULL(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>); <br></code></pre></td></tr></table></figure><hr><h1 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h1><p>笛卡尔积在SQL中的实现方式既是交叉连接(Cross Join)。所有连接方式都会先生成临时笛卡尔积表，笛卡尔积是关系代数里的一个概念，表示两个表中的每一行数据任意组合。</p><h1 id="SQL-ORDER-BY-关键字"><a href="#SQL-ORDER-BY-关键字" class="headerlink" title="SQL ORDER BY 关键字"></a>SQL ORDER BY 关键字</h1><p>ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字。</p><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name,column_name<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_name,column_name <span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p><strong>演示数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">----+--------------+---------------------------+-------+---------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name         <span class="hljs-operator">|</span> url                       <span class="hljs-operator">|</span> alexa <span class="hljs-operator">|</span> country <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------------+---------------------------+-------+---------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> Google       <span class="hljs-operator">|</span> https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.google.cm<span class="hljs-operator">/</span>    <span class="hljs-operator">|</span> <span class="hljs-number">1</span>     <span class="hljs-operator">|</span> USA     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2</span>  <span class="hljs-operator">|</span> 淘宝          <span class="hljs-operator">|</span> https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.taobao.com<span class="hljs-operator">/</span>   <span class="hljs-operator">|</span> <span class="hljs-number">13</span>    <span class="hljs-operator">|</span> CN      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span>  <span class="hljs-operator">|</span> 菜鸟教程      <span class="hljs-operator">|</span> http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.runoob.com<span class="hljs-operator">/</span>    <span class="hljs-operator">|</span> <span class="hljs-number">4689</span>  <span class="hljs-operator">|</span> CN      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span>  <span class="hljs-operator">|</span> 微博          <span class="hljs-operator">|</span> http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>weibo.com<span class="hljs-operator">/</span>         <span class="hljs-operator">|</span> <span class="hljs-number">20</span>    <span class="hljs-operator">|</span> CN      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">5</span>  <span class="hljs-operator">|</span> Facebook     <span class="hljs-operator">|</span> https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.facebook.com<span class="hljs-operator">/</span> <span class="hljs-operator">|</span> <span class="hljs-number">3</span>     <span class="hljs-operator">|</span> USA     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------------+---------------------------+-------+---------+</span><br></code></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Websites<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> alexa;<br></code></pre></td></tr></table></figure><p><em><strong>asc和desc的英文全称</strong></em></p><ol><li><p>asc：英文全称是ascend，含义如下：</p><p><img src="https://s2.loli.net/2022/05/17/FPXkeh5qNLinIO1.png"></p></li><li><p>desc：英文全称是descend，含义如下：</p><p><img src="https://s2.loli.net/2022/05/17/PviDw8norjdzb7y.png"></p></li></ol><hr><h1 id="SQL之CASE-WHEN用法详解"><a href="#SQL之CASE-WHEN用法详解" class="headerlink" title="SQL之CASE WHEN用法详解"></a>SQL之CASE WHEN用法详解</h1><p>简单CASE WHEN函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> SCORE <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;优&#x27;</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;不及格&#x27;</span> <span class="hljs-keyword">END</span><br><span class="hljs-keyword">CASE</span> SCORE <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;B&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;良&#x27;</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;不及格&#x27;</span> <span class="hljs-keyword">END</span><br><span class="hljs-keyword">CASE</span> SCORE <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;中&#x27;</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;不及格&#x27;</span> <span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>等同于，使用CASE WHEN条件表达式函数实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SCORE <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;优&#x27;</span><br>     <span class="hljs-keyword">WHEN</span> SCORE <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;B&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;良&#x27;</span><br>     <span class="hljs-keyword">WHEN</span> SCORE <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;中&#x27;</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;不及格&#x27;</span> <span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p><strong>场景：</strong>有分数score，score&lt;60返回不及格，score&gt;=60返回及格，score&gt;=80返回优秀</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">SELECT</span><br>    STUDENT_NAME,<br>    (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> score <span class="hljs-operator">&lt;</span> <span class="hljs-number">60</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;不及格&#x27;</span><br>        <span class="hljs-keyword">WHEN</span> score <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> score <span class="hljs-operator">&lt;</span> <span class="hljs-number">80</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;及格&#x27;</span><br>        <span class="hljs-keyword">WHEN</span> score <span class="hljs-operator">&gt;=</span> <span class="hljs-number">80</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;优秀&#x27;</span><br>        <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;异常&#x27;</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> REMARK<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">TABLE</span><br></code></pre></td></tr></table></figure><p> <strong>注意：</strong>如果你想判断score是否<strong>null</strong>的情况写法应为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> score <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;缺席考试&#x27;</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;正常&#x27;</span> <span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><h1 id="SQL-CONCAT-函数"><a href="#SQL-CONCAT-函数" class="headerlink" title="SQL CONCAT()函数"></a>SQL CONCAT()函数</h1><p>SQL CONCAT函数用于连接两个字符串，形成一个字符串。</p><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> CONCAT(<span class="hljs-string">&#x27;FIRST &#x27;</span>, <span class="hljs-string">&#x27;SECOND&#x27;</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span> CONCAT(<span class="hljs-string">&#x27;FIRST &#x27;</span>, <span class="hljs-string">&#x27;SECOND&#x27;</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">FIRST</span> <span class="hljs-keyword">SECOND</span>               <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br></code></pre></td></tr></table></figure><hr><h1 id="SQL-BETWEEN-操作符"><a href="#SQL-BETWEEN-操作符" class="headerlink" title="SQL BETWEEN 操作符"></a>SQL BETWEEN 操作符</h1><p>操作符 BETWEEN … AND 会选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。</p><p><strong>原始的表 (在实例中使用：)</strong></p><p>Persons 表:</p><table><thead><tr><th align="left">Id</th><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Address</th><th align="left">City</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Adams</td><td align="left">John</td><td align="left">Oxford Street</td><td align="left">London</td></tr><tr><td align="left">2</td><td align="left">Bush</td><td align="left">George</td><td align="left">Fifth Avenue</td><td align="left">New York</td></tr><tr><td align="left">3</td><td align="left">Carter</td><td align="left">Thomas</td><td align="left">Changan Street</td><td align="left">Beijing</td></tr><tr><td align="left">4</td><td align="left">Gates</td><td align="left">Bill</td><td align="left">Xuanwumen 10</td><td align="left">Beijing</td></tr></tbody></table><ol><li><p><strong>实例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons<br><span class="hljs-keyword">WHERE</span> LastName<br><span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;Adams&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;Carter&#x27;</span><br></code></pre></td></tr></table></figure><p>结果集：</p><table><thead><tr><th align="left">Id</th><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Address</th><th align="left">City</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Adams</td><td align="left">John</td><td align="left">Oxford Street</td><td align="left">London</td></tr><tr><td align="left">2</td><td align="left">Bush</td><td align="left">George</td><td align="left">Fifth Avenue</td><td align="left">New York</td></tr></tbody></table></li><li><p><strong>实例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons<br><span class="hljs-keyword">WHERE</span> LastName<br><span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;Adams&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;Carter&#x27;</span><br></code></pre></td></tr></table></figure><p>结果集：</p><table><thead><tr><th align="left">Id</th><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Address</th><th align="left">City</th></tr></thead><tbody><tr><td align="left">3</td><td align="left">Carter</td><td align="left">Thomas</td><td align="left">Changan Street</td><td align="left">Beijing</td></tr><tr><td align="left">4</td><td align="left">Gates</td><td align="left">Bill</td><td align="left">Xuanwumen 10</td><td align="left">Beijing</td></tr></tbody></table></li></ol><hr><h1 id="MYSQL-分组-group-by-多个字段"><a href="#MYSQL-分组-group-by-多个字段" class="headerlink" title="MYSQL 分组 group by 多个字段"></a>MYSQL 分组 group by 多个字段</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Subject, Semester, <span class="hljs-built_in">Count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span> Subject_Selection<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Subject, Semester<br></code></pre></td></tr></table></figure><p><em>GROUP BY X, Y意思是将所有具有相同X字段值和Y字段值的记录放到一个分组里</em></p><hr><h1 id="MySQL应用之CROSS-JOIN用法简介教程"><a href="#MySQL应用之CROSS-JOIN用法简介教程" class="headerlink" title="MySQL应用之CROSS JOIN用法简介教程"></a>MySQL应用之CROSS JOIN用法简介教程</h1><h2 id="cross-join简介"><a href="#cross-join简介" class="headerlink" title="cross join简介"></a>cross join简介</h2><p>在MySQL中，当CROSS JOIN不使用WHERE子句时，CROSS JOIN产生了一个结果集，该结果集是两个关联表的行的乘积。</p><p><img src="https://s2.loli.net/2022/05/18/4DsiHSFrORbnj8h.png"></p><h2 id="cross-join用法"><a href="#cross-join用法" class="headerlink" title="cross join用法"></a>cross join用法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1<br><span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> t2;<br></code></pre></td></tr></table></figure><p><em>注意：cross join的时候是不需要on或者using关键字的，这个是区别于inner join和join的</em></p><hr><h1 id="MySQL-YEAR函数：获取年份"><a href="#MySQL-YEAR函数：获取年份" class="headerlink" title="MySQL YEAR函数：获取年份"></a>MySQL YEAR函数：获取年份</h1><p>MySQL YEAR() 函数可以从指定日期值中来获取年份值。</p><p>语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">YEAR</span>(<span class="hljs-type">date</span>);<br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(NOW());<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">YEAR</span>(NOW()) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">2019</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><hr><h1 id="MySQL-IF函数：判断"><a href="#MySQL-IF函数：判断" class="headerlink" title="MySQL IF函数：判断"></a>MySQL IF函数：判断</h1><p>语法结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">IF(expr,v1,v2)<br></code></pre></td></tr></table></figure><p>其中：表达式 expr 得到不同的结果，当 expr 为真是返回 v1 的值，否则返回 v2.</p><p>实例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> IF(<span class="hljs-number">1</span><span class="hljs-operator">&lt;</span><span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>) c1,IF(<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span><span class="hljs-number">5</span>,<span class="hljs-string">&#x27;√&#x27;</span>,<span class="hljs-string">&#x27;×&#x27;</span>) c2,IF(STRCMP(<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;ab&#x27;</span>),<span class="hljs-string">&#x27;yes&#x27;</span>,<span class="hljs-string">&#x27;no&#x27;</span>) c3;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+----+-----+</span><br><span class="hljs-operator">|</span> c1 <span class="hljs-operator">|</span> c2 <span class="hljs-operator">|</span> c3  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+----+-----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> × <span class="hljs-operator">|</span> yes <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+----+-----+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">2</span> warnings (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><hr><h1 id="MySQL-CURDATE和CURRENT-DATE函数：获取系统当前日期"><a href="#MySQL-CURDATE和CURRENT-DATE函数：获取系统当前日期" class="headerlink" title="MySQL CURDATE和CURRENT_DATE函数：获取系统当前日期"></a>MySQL CURDATE和CURRENT_DATE函数：获取系统当前日期</h1><p>MySQL 中 CURDATE() 和 CURRENT_DATE() 函数的作用相同，将当前日期按照“YYYY-MM-DD”或“YYYYMMDD”格式的值返回，具体格式根据函数用在字符串或数字语境中而定。</p><p>实例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> CURDATE(),<span class="hljs-built_in">CURRENT_DATE</span>(),<span class="hljs-built_in">CURRENT_DATE</span>()<span class="hljs-operator">+</span><span class="hljs-number">0</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------+----------------+------------------+</span><br><span class="hljs-operator">|</span> CURDATE()  <span class="hljs-operator">|</span> <span class="hljs-built_in">CURRENT_DATE</span>() <span class="hljs-operator">|</span> <span class="hljs-built_in">CURRENT_DATE</span>()<span class="hljs-operator">+</span><span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------+----------------+------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">2017</span><span class="hljs-number">-04</span><span class="hljs-number">-01</span> <span class="hljs-operator">|</span> <span class="hljs-number">2017</span><span class="hljs-number">-04</span><span class="hljs-number">-01</span>     <span class="hljs-operator">|</span>         <span class="hljs-number">20170401</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------+----------------+------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.03</span> sec)<br></code></pre></td></tr></table></figure><hr><h1 id="难题分析"><a href="#难题分析" class="headerlink" title="难题分析"></a>难题分析</h1><h2 id="19、按各科成绩进行排序，并显示排名"><a href="#19、按各科成绩进行排序，并显示排名" class="headerlink" title="19、按各科成绩进行排序，并显示排名"></a>19、按各科成绩进行排序，并显示排名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>(<span class="hljs-variable">@i</span> :<span class="hljs-operator">=</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-variable">@pre</span>_group_id <span class="hljs-operator">=</span> c_id <span class="hljs-keyword">then</span> <span class="hljs-variable">@i</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> rank,<br>(<span class="hljs-variable">@pre</span>_group_id :<span class="hljs-operator">=</span> c_id) <span class="hljs-keyword">as</span> c_id,<br>c_name,s_id,s_name,s_score<br><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-variable">@i</span> :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>, <span class="hljs-variable">@pre</span>_group_id :<span class="hljs-operator">=</span> <span class="hljs-number">1</span>) var<br><span class="hljs-keyword">cross</span> <span class="hljs-keyword">join</span> (<br><span class="hljs-keyword">select</span> c.c_id,c.c_name,s.s_id,s.s_name,s_score<br><span class="hljs-keyword">from</span> score sc<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> student s <span class="hljs-keyword">on</span> sc.s_id <span class="hljs-operator">=</span> s.s_id<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> course c <span class="hljs-keyword">on</span> sc.c_id <span class="hljs-operator">=</span> c.c_id<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> c.c_id,s.s_id<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c.c_id,s_score <span class="hljs-keyword">desc</span><br>) t1;<br></code></pre></td></tr></table></figure><h3 id="User-Defined-Variables"><a href="#User-Defined-Variables" class="headerlink" title="User-Defined Variables"></a>User-Defined Variables</h3><p>User variables are written as <code>@*</code>var_name<code>*</code>, where the variable name <em><code>var_name</code></em> consists of alphanumeric characters, <code>.</code>, <code>_</code>, and <code>$</code>. A user variable name can contain other characters if you quote it as a string or identifier (for example, <code>@&#39;my-var&#39;</code>, <code>@&quot;my-var&quot;</code>, or <code>@</code>my-var``).</p><p>You can store a value in a user-defined variable in one statement and refer to it later in another statement. This enables you to pass values from one statement to another.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SET</span> <span class="hljs-variable">@t1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>, <span class="hljs-variable">@t2</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>, <span class="hljs-variable">@t3</span>:<span class="hljs-operator">=</span><span class="hljs-number">4</span>;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@t1</span>, <span class="hljs-variable">@t2</span>, <span class="hljs-variable">@t3</span>, <span class="hljs-variable">@t4</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">@t1</span><span class="hljs-operator">+</span><span class="hljs-variable">@t2</span><span class="hljs-operator">+</span><span class="hljs-variable">@t3</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+--------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-variable">@t1</span>  <span class="hljs-operator">|</span> <span class="hljs-variable">@t2</span>  <span class="hljs-operator">|</span> <span class="hljs-variable">@t3</span>  <span class="hljs-operator">|</span> <span class="hljs-variable">@t4</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">@t1</span><span class="hljs-operator">+</span><span class="hljs-variable">@t2</span><span class="hljs-operator">+</span><span class="hljs-variable">@t3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+--------------------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span>                  <span class="hljs-number">7</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+--------------------+</span><br></code></pre></td></tr></table></figure><p>It is also possible to assign a value to a user variable in statements other than <code>SET</code>. (This functionality is deprecated in MySQL 8.0 and subject to removal in a subsequent release.) When making an assignment in this way, the assignment operator must be <code>:=</code> and not <code>=</code>because the latter is treated as the comparison operator <code>=</code> in statements other than <code>SET</code>:</p><p>从mysql官方文档中找到的解释，@定义用户变量，定义方法有两种：</p><ol><li><code>set</code>运算符定义</li><li>在sql语句中用<code>:=</code>定义</li></ol><p>定义用户变量能让用户在不同sql语句中传递数据。</p><hr><h2 id="25、查询各科成绩前三名的记录"><a href="#25、查询各科成绩前三名的记录" class="headerlink" title="25、查询各科成绩前三名的记录"></a>25、查询各科成绩前三名的记录</h2><p>内外关联</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> c.c_id,c.c_name,s.s_id,s.s_name,s_score<br><span class="hljs-keyword">from</span> (<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> score sc<br><span class="hljs-keyword">where</span> (<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> score sc1<br><span class="hljs-keyword">where</span> sc.c_id <span class="hljs-operator">=</span> sc1.c_id<br><span class="hljs-keyword">and</span> sc.s_score <span class="hljs-operator">&lt;</span> sc1.s_score<br>) <span class="hljs-operator">&lt;</span> <span class="hljs-number">3</span><br>)<br>t1<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> student s <span class="hljs-keyword">on</span> t1.s_id <span class="hljs-operator">=</span> s.s_id <br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> course c <span class="hljs-keyword">on</span> t1.c_id <span class="hljs-operator">=</span> c.c_id <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c.c_id,s_score <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">------+--------+------+--------+---------+</span><br><span class="hljs-operator">|</span> c_id <span class="hljs-operator">|</span> c_name <span class="hljs-operator">|</span> s_id <span class="hljs-operator">|</span> s_name <span class="hljs-operator">|</span> s_score <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------+------+--------+---------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 语文   <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 赵雷   <span class="hljs-operator">|</span>      <span class="hljs-number">80</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 语文   <span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 孙风   <span class="hljs-operator">|</span>      <span class="hljs-number">80</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 语文   <span class="hljs-operator">|</span>    <span class="hljs-number">5</span> <span class="hljs-operator">|</span> 周梅   <span class="hljs-operator">|</span>      <span class="hljs-number">76</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 数学   <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 赵雷   <span class="hljs-operator">|</span>      <span class="hljs-number">90</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 数学   <span class="hljs-operator">|</span>    <span class="hljs-number">7</span> <span class="hljs-operator">|</span> 郑竹   <span class="hljs-operator">|</span>      <span class="hljs-number">89</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 数学   <span class="hljs-operator">|</span>    <span class="hljs-number">5</span> <span class="hljs-operator">|</span> 周梅   <span class="hljs-operator">|</span>      <span class="hljs-number">87</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 英语   <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 赵雷   <span class="hljs-operator">|</span>      <span class="hljs-number">99</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 英语   <span class="hljs-operator">|</span>    <span class="hljs-number">7</span> <span class="hljs-operator">|</span> 郑竹   <span class="hljs-operator">|</span>      <span class="hljs-number">98</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 英语   <span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 孙风   <span class="hljs-operator">|</span>      <span class="hljs-number">80</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------+------+--------+---------+</span><br></code></pre></td></tr></table></figure><hr><h2 id="47、查询本周过生日的学生"><a href="#47、查询本周过生日的学生" class="headerlink" title="47、查询本周过生日的学生"></a>47、查询本周过生日的学生</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span><br>datediff(concat(<span class="hljs-keyword">year</span>(<span class="hljs-built_in">current_date</span>()), date_format(s_birth, <span class="hljs-string">&#x27;-%m-%d&#x27;</span>)), <span class="hljs-built_in">current_date</span>())<br><span class="hljs-keyword">between</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">7</span><br><span class="hljs-keyword">or</span><br>datediff(concat(<span class="hljs-keyword">year</span>(<span class="hljs-built_in">current_date</span>()) <span class="hljs-operator">+</span> <span class="hljs-number">1</span>, date_format(s_birth, <span class="hljs-string">&#x27;-%m-%d&#x27;</span>)), <span class="hljs-built_in">current_date</span>())<br><span class="hljs-keyword">between</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">7</span>;<br></code></pre></td></tr></table></figure><h3 id="MySQL-DATEDIFF-函数"><a href="#MySQL-DATEDIFF-函数" class="headerlink" title="MySQL DATEDIFF() 函数"></a>MySQL DATEDIFF() 函数</h3><p>DATEDIFF() 函数返回两个日期之间的天数。</p><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">DATEDIFF(date1,date2)<br></code></pre></td></tr></table></figure><p><strong>实例</strong></p><ol><li><p>```sql<br>SELECT DATEDIFF(‘2008-12-30’,’2008-12-29’) AS DiffDate</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><br>   结果：<br><br>   | DiffDate |<br>   | <span class="hljs-symbol">:-------</span> |<br>   | <span class="hljs-number">1</span>        |<br><br><span class="hljs-number">2</span>. ```sql<br>   SELECT DATEDIFF(<span class="hljs-string">&#x27;2008-12-29&#x27;</span>,<span class="hljs-string">&#x27;2008-12-30&#x27;</span>) AS DiffDate<br></code></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th align="left">DiffDate</th></tr></thead><tbody><tr><td align="left">-1</td></tr></tbody></table></li></ol><hr><h3 id="MySQL-DATE-FORMAT-函数"><a href="#MySQL-DATE-FORMAT-函数" class="headerlink" title="MySQL DATE_FORMAT() 函数"></a>MySQL DATE_FORMAT() 函数</h3><p>DATE_FORMAT() 函数用于以不同的格式显示日期/时间数据。</p><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">DATE_FORMAT(<span class="hljs-type">date</span>,format)<br></code></pre></td></tr></table></figure><p><em>date</em> 参数是合法的日期。<em>format</em> 规定日期/时间的输出格式。</p><table><thead><tr><th align="left">格式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%m</td><td align="left">月，数值(00-12)</td></tr><tr><td align="left">%d</td><td align="left">月的天，数值(00-31)</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>sql经典五十题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狂神说mabatis-plus</title>
    <link href="/2022/05/26/%E7%8B%82%E7%A5%9E%E8%AF%B4mabatis-plus/"/>
    <url>/2022/05/26/%E7%8B%82%E7%A5%9E%E8%AF%B4mabatis-plus/</url>
    
    <content type="html"><![CDATA[<h1 id="mybatis-plus简介"><a href="#mybatis-plus简介" class="headerlink" title="mybatis-plus简介"></a>mybatis-plus简介</h1><p><img src="https://s2.loli.net/2022/05/23/qFpLa4Dfw3iSOyG.png"></p><h1 id="快速入门体验"><a href="#快速入门体验" class="headerlink" title="快速入门体验"></a>快速入门体验</h1><blockquote><p>使用第三方组件：</p></blockquote><p>1、导入对应的依赖</p><p>2、研究依赖如何配置</p><p>3、代码如何编写</p><p>4、提高扩展技术的能力</p><blockquote><p>课中疑问</p></blockquote><h2 id="什么是持久层？"><a href="#什么是持久层？" class="headerlink" title="什么是持久层？"></a>什么是持久层？</h2><ul><li>完成持久化工作的代码块 . —-&gt; dao层 【DAO (Data Access Object) 数据访问对象</li><li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加 以固化，而持久化的实现过程则大多通过各种关系数据库来完成。</li><li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就 是用来操作数据库存在的！</li></ul><h2 id="Java语法糖"><a href="#Java语法糖" class="headerlink" title="Java语法糖"></a>Java语法糖</h2><p><a href="https://so.csdn.net/so/search?q=%E8%AF%AD%E6%B3%95%E7%B3%96&spm=1001.2101.3001.7020">语法糖</a>（Syntactic Sugar），也称糖衣语法，是由英国计算机学家 <strong>Peter.J.Landin（彼得·兰丁）</strong> 发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。<strong>语法糖就是对现有语法的一个封装</strong>。简而言之，<strong>语法糖让程序更加简洁，有更高的可读性</strong>。</p><h1 id="配置日志输出"><a href="#配置日志输出" class="headerlink" title="配置日志输出"></a>配置日志输出</h1><p>在<code>application.properties</code>中加入以下代码：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/23/8JRchfitYwv67x2.png"></p><h1 id="CRUD扩展"><a href="#CRUD扩展" class="headerlink" title="CRUD扩展"></a>CRUD扩展</h1><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span></span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setName(<span class="hljs-string">&quot;狂神说Java&quot;</span>);<br>        user.setAge(<span class="hljs-number">3</span>);<br>        user.setEmail(<span class="hljs-string">&quot;1242341@qq.com&quot;</span>);<br>        <span class="hljs-keyword">int</span> userId = userMapper.insert(user);<br>        System.out.println(userId);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/23/oFHiYGrldtRuCyQ.png" alt="image-20220523110837812"></p><h3 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h3><blockquote><p>SnowFlake算法生成id的结果是一个64bit大小的整数，它的结构如下图：</p></blockquote><p><img src="https://s2.loli.net/2022/05/23/WLHIZlxyVMJt2qa.png" alt="image-20220523114329974"></p><h3 id="不同的主键策略测试"><a href="#不同的主键策略测试" class="headerlink" title="不同的主键策略测试"></a>不同的主键策略测试</h3><blockquote><p>主键自增</p></blockquote><ul><li><p>实体类上添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br></code></pre></td></tr></table></figure></li><li><p>数据库字段设置自增</p></li></ul><blockquote><p>其他主键策略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">IdType</span> </span>&#123;<br>    AUTO(<span class="hljs-number">0</span>),<br>    NONE(<span class="hljs-number">1</span>), <span class="hljs-comment">// 无主键</span><br>    INPUT(<span class="hljs-number">2</span>), <span class="hljs-comment">// 手动输入主键</span><br>    ID_WORKER(<span class="hljs-number">3</span>), <span class="hljs-comment">//默认</span><br>    UUID(<span class="hljs-number">4</span>),<br>    ID_WORKER_STR(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> key;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IdType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 更新测试</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setName(<span class="hljs-string">&quot;更新之后&quot;</span>);<br>    user.setId(<span class="hljs-number">1L</span>);<br>    userMapper.updateById(user);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/26/f7QOpJo3zR1rETI.png"></p><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><p>创建时间、修改时间！这些个操作一遍都是自动化完成，我们不希望手动更新！</p><p>阿里巴巴开发手册：所有的数据库表：gmt_create\gmt_modified几乎所有的表都要配置上！而且需要自动化</p><blockquote><p><em><strong>课中疑问</strong></em></p></blockquote><h4 id="查看mysql版本"><a href="#查看mysql版本" class="headerlink" title="查看mysql版本"></a>查看mysql版本</h4><p>在cmd模式中cd命令跳转到mysql的bin目录下，使用命令<code>mysql -v</code></p><h3 id="乐观锁处理讲解"><a href="#乐观锁处理讲解" class="headerlink" title="乐观锁处理讲解"></a>乐观锁处理讲解</h3><blockquote><p>乐观锁，一般不锁</p><p>悲观锁，一直锁着</p></blockquote><ol><li><p>给数据库中添加version字段</p><p><img src="https://s2.loli.net/2022/05/26/LIlJoiUDq9s2w3H.png"></p></li><li><p>实体类加对应的字段</p><p><img src="https://s2.loli.net/2022/05/26/7F6Ufhc4iLJaGw3.png"></p></li><li><p>注册组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;com.kuang.mapper&quot;)</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisPlusConfig</span> </span>&#123;<br>    <span class="hljs-comment">// 注册乐观锁插件</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 旧版</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title">optimisticLockerInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInterceptor();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><blockquote><p>根据ID查询多个数据：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectByBatchId</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; user = userMapper.selectBatchIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>        user.forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>多条件查询</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//tiao条件查询map</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectByHashMap</span><span class="hljs-params">()</span></span>&#123;<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">//自定义查询</span><br>    map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;狂神说JAVA&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">3</span>);<br><br>    List&lt;User&gt; users = userMapper.selectByMap(map);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分页查询操作"><a href="#分页查询操作" class="headerlink" title="分页查询操作"></a>分页查询操作</h2><blockquote><p>mybatis_plus其实内置了分页插件</p></blockquote><ol><li><p>配置拦截器组件即可</p></li><li><p>```java<br>// 旧版<br>// 分页插件<br>@Bean<br>public PaginationInterceptor paginationInterceptor() {</p><pre><code>return new PaginationInterceptor();</code></pre><p>}</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><span class="hljs-number">3.</span> ```java<br>   // 测试分页查询<br>       @Test<br>       <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testPage() &#123;<br>   //        IPage接口实现类<br>   //        参数一：当前页<br>   //        参数二：页面大小<br>           Page&lt;<span class="hljs-keyword">User</span>&gt; page = <span class="hljs-built_in">new</span> Page&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<br>   //        IPage&lt;T&gt; selectPage(IPage&lt;T&gt; var1, @Param(&quot;ew&quot;) <span class="hljs-keyword">Wrapper</span>&lt;T&gt; var2);<br>           userMapper.selectPage(page, <span class="hljs-keyword">null</span>);<br>           page.getRecords().<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>::println);<br>   <br>           // 获取数据总量<br>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(page.getTotal());<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/27/JTRysxuviroW26q.png"></p></li></ol><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><h3 id="根据ID删除记录"><a href="#根据ID删除记录" class="headerlink" title="根据ID删除记录"></a>根据ID删除记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试删除</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteById</span><span class="hljs-params">()</span></span>&#123;<br>       userMapper.deleteById(<span class="hljs-number">1L</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/27/qIduXc571lmPBMH.png"></p><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试通过ID批量删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteByIds</span><span class="hljs-params">()</span></span>&#123;<br>    userMapper.deleteBatchIds(Arrays.asList(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/27/tfSCJKvGoemMRV8.png"></p><h3 id="根据条件删除"><a href="#根据条件删除" class="headerlink" title="根据条件删除"></a>根据条件删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过map删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteByMap</span><span class="hljs-params">()</span> </span>&#123;<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br>    userMapper.deleteByMap(map);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/27/V6ONAyHMzBngIcf.png"></p><h1 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h1><p>wrapper，替代复杂sql语句</p><ol><li><p>```java<br>@Test<br>void contextLoads() {</p><pre><code>//查询name和email不为空的用户，年龄大于等于12QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();wrapper.isNotNull(&quot;name&quot;)    .isNotNull(&quot;email&quot;)    .ge(&quot;age&quot;,12);userMapper.selectList(wrapper);</code></pre><p>}</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><span class="hljs-number">2.</span> ```java<br>   @Test<br>   <span class="hljs-type">void</span> test2()&#123;<br>       // 查询名字狂神说<br>       QueryWrapper&lt;<span class="hljs-keyword">User</span>&gt; <span class="hljs-keyword">wrapper</span> = <span class="hljs-built_in">new</span> QueryWrapper&lt;&gt;();<br>       <span class="hljs-keyword">wrapper</span>.eq(&quot;name&quot;, &quot;Tom&quot;);<br>       <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = userMapper.selectOne(<span class="hljs-keyword">wrapper</span>);<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>```java<br>@Test<br>void test3(){</p><pre><code>// 查询年龄在20~30之间的用户QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();wrapper.between(&quot;age&quot;, 20, 30);Integer count = userMapper.selectCount(wrapper);System.out.println(count);</code></pre><p>}</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><span class="hljs-number">4.</span> ```java<br>   // 模糊查询<br>   @Test<br>   <span class="hljs-type">void</span> test4()&#123;<br>       // 邮箱t开头，名字中不含字母e的用户<br>       QueryWrapper&lt;<span class="hljs-keyword">User</span>&gt; <span class="hljs-keyword">wrapper</span> = <span class="hljs-built_in">new</span> QueryWrapper&lt;&gt;();<br>       <span class="hljs-keyword">wrapper</span>.notLike(&quot;name&quot;, &quot;e&quot;)<br>           .likeRight(&quot;email&quot;, &quot;t&quot;);<br>       List&lt;Map&lt;String,<span class="hljs-keyword">Object</span>&gt;&gt; maps = userMapper.selectMaps(<span class="hljs-keyword">wrapper</span>);<br>       maps.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>::println);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h1><ol><li><p>3.0.7版本移除 对 mybatis-plus-generator 包的依赖,自己按需引入，尽在还需要导入模板依赖，</p><!-- 模板引擎 --><dependency><groupId>org.apache.velocity</groupId><artifactId>velocity-engine-core</artifactId><version>2.0</version></dependency></li><li><pre><code class="java">package com.kuang;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;import com.baomidou.mybatisplus.generator.config.GlobalConfig;import com.baomidou.mybatisplus.generator.config.PackageConfig;import com.baomidou.mybatisplus.generator.config.StrategyConfig;import com.baomidou.mybatisplus.generator.config.rules.DateType;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;/** * TODO * * @ClassName KuangCode * @Author Alfa * @Data 2022/5/26 14:27 * @Version 1.0 **/public class KuangCode &#123;    public static void main(String[] args) &#123;        // 构建代码自动生成器对象        AutoGenerator mpg = new AutoGenerator();        // 配置策略        // 1.全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath= System.getProperty(&quot;user.dir&quot;);        gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);        gc.setAuthor(&quot;alfa&quot;);        gc.setOpen(false);        gc.setFileOverride(false); // 是否覆盖        gc.setServiceName(&quot;%sService&quot;); // 去service的i前缀        gc.setIdType(IdType.ID_WORKER);        gc.setDateType(DateType.ONLY_DATE);        gc.setSwagger2(true);        mpg.setGlobalConfig(gc);        //2.设置数据源        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl(&quot;jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&quot;);        dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);        dsc.setUsername(&quot;root&quot;);        dsc.setPassword(&quot;&quot;);        dsc.setDbType(DbType.MYSQL);        mpg.setDataSource(dsc);        // 3。包的配置        PackageConfig pc = new PackageConfig();        pc.setModuleName(&quot;blog&quot;);        pc.setParent(&quot;com.kuang&quot;);        pc.setEntity(&quot;pojo&quot;);        pc.setMapper(&quot;mapper&quot;);        pc.setService(&quot;service&quot;);        pc.setController(&quot;controller&quot;);        mpg.setPackageInfo(pc);        //5.策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setInclude(&quot;user&quot;);        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setEntityLombokModel(true); //自动生成lombok注解        strategy.setLogicDeleteFieldName(&quot;deleted&quot;);        //自动填充配置//        TableFill gmtCreate = new TableFill(&quot;gmt_create&quot;, FieldFill.INSERT);//        TableFill gmtModified = new TableFill(&quot;gmt_modified&quot;, FieldFill.INSERT_UPDATE);//        ArrayList&lt;TableFill&gt; tableFills = new ArrayList&lt;&gt;();//        tableFills.add(gmtCreate);//        tableFills.add(gmtModified);//        strategy.setTableFillList(tableFills);        // 乐观锁//        strategy.setVersionFieldName(&quot;version&quot;);        // 驼峰命名        strategy.setRestControllerStyle(true);        strategy.setControllerMappingHyphenStyle(true); // localhost:8080/hello_iu_2        mpg.setStrategy(strategy);        mpg.execute();    &#125;&#125;</code></pre></li><li><img src="https://s2.loli.net/2022/05/27/6K8OTpCWrlkezSJ.png" style="zoom: 50%;"></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis-plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome使用问题</title>
    <link href="/2022/05/21/chrome%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/21/chrome%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="chrome浏览页面常用快捷键"><a href="#chrome浏览页面常用快捷键" class="headerlink" title="chrome浏览页面常用快捷键"></a>chrome浏览页面常用快捷键</h1><p><em><strong><a href="https://blog.csdn.net/weixin_35319943/article/details/111955799#:~:text=Ctrl%20%2B%20F4%20%E5%85%B3%E9%97%ADchrome%E6%B5%8F%E8%A7%88%E5%99%A8%20Ctrl%2BTab%20%E6%88%96%20Ctrl%2BPgDown%20%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E3%80%82,Ctrl%2BPgUp%20%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E3%80%82%20Ctrl%2B1%20%E5%88%B0%20Ctrl%2B8%20%E5%88%87%E6%8D%A2%E5%88%B0%E6%A0%87%E7%AD%BE%E6%A0%8F%E4%B8%AD%E6%8C%87%E5%AE%9A%E5%9C%B0%E4%BD%8D%E7%BC%96%E5%8F%B7%E6%89%80%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A0%87%E7%AD%BE%E9%A1%B5%E3%80%82%20Ctrl%2B9%20%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E3%80%82">原文链接</a></strong></em></p><ol><li>Ctrl+N 打开新窗口</li><li>Ctrl+T 打开新标签页</li><li>Ctrl+W关闭当前标签</li><li>Ctrl+Tab 或 Ctrl+PgDown 切换到下一个标签页</li><li>Ctrl+Shift+Tab 或 Ctrl+PgUp 切换到上一个标签页</li><li>Ctrl+1 到 Ctrl+8 切换到标签栏中指定地位编号所对应的标签页</li><li>Ctrl+Shift+T 从头打开前次封闭的标签页。谷歌浏览器可记住比来封闭的 10 个标签页</li><li>Ctrl+Shift+Delete:用于显示“清除浏览数据”界面</li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chrome</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea使用问题</title>
    <link href="/2022/05/20/idea%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/20/idea%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="idea快捷键"><a href="#idea快捷键" class="headerlink" title="idea快捷键"></a>idea快捷键</h1><p><em><strong><a href="https://blog.csdn.net/qq_38963960/article/details/89552704">原文链接</a></strong></em></p><ol><li><h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + Z</td><td align="left">撤销</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td></tr><tr><td align="left">Ctrl + W</td><td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td></tr><tr><td align="left">Ctrl + Q</td><td align="left">光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td></tr><tr><td align="left">Ctrl + B</td><td align="left">进入光标所在的方法/变量的接口或是定义出，等效于 <code>Ctrl + 左键单击</code></td></tr><tr><td align="left">Ctrl + [</td><td align="left">移动光标到当前所在代码的花括号开始位置</td></tr><tr><td align="left">Ctrl + ]</td><td align="left">移动光标到当前所在代码的花括号结束位置</td></tr></tbody></table></li><li><h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Alt + 1,2,3…9</td><td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table></li><li><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Shift + F6</td><td align="left">对文件 / 文件夹 重命名</td></tr><tr><td align="left">Shift + Enter</td><td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td align="left">Shift + 滚轮前后滚动</td><td align="left">当前文件的横向滚动轴滚动</td></tr></tbody></table></li><li><h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + Alt + L</td><td align="left">格式化代码，可以对当前文件和整个包目录使用</td></tr><tr><td align="left">Ctrl + Alt + O</td><td align="left">优化导入的类，可以对当前文件和整个包目录使用</td></tr><tr><td align="left">Ctrl + Alt + Enter</td><td align="left">光标所在行上空出一行，光标定位到新行</td></tr><tr><td align="left">Ctrl + Alt + 左方向键</td><td align="left">退回到上一个操作的地方</td></tr><tr><td align="left">Ctrl + Alt + 右方向键</td><td align="left">前进到上一个操作的地方</td></tr><tr><td align="left">ctrl + alt + B</td><td align="left">查找接口的实现类</td></tr></tbody></table></li><li><h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Ctrl + Shift + Z</td><td align="left">取消撤销</td></tr><tr><td align="left">Ctrl + Shift + W</td><td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td></tr><tr><td align="left">Ctrl + Shift + U</td><td align="left">对选中的代码进行大 / 小写轮流转换</td></tr><tr><td align="left">Ctrl + Shift + Enter</td><td align="left">自动结束代码，行末自动添加分号</td></tr></tbody></table></li><li><h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">Alt + Shift + 前方向键</td><td align="left">移动光标所在行向上移动</td></tr><tr><td align="left">Alt + Shift + 后方向键</td><td align="left">移动光标所在行向下移动</td></tr></tbody></table></li><li><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="left">快捷键</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">F2</td><td align="left">跳转到下一个高亮错误 或 警告位置</td></tr></tbody></table></li></ol><h1 id="如何使用IDEA中自带的数据库database！"><a href="#如何使用IDEA中自带的数据库database！" class="headerlink" title="如何使用IDEA中自带的数据库database！"></a>如何使用IDEA中自带的数据库database！</h1><blockquote><p>打开后自己填入信息<br>点击确定后会下载相应驱动，等待即可！</p></blockquote><img src="https://s2.loli.net/2022/05/26/FiRzKcaf1AEWUV6.png" style="zoom:50%;"><h2 id="idea连接数据库-The-specified-database-user-password-combination-is-rejected-com-mysql-cj报错"><a href="#idea连接数据库-The-specified-database-user-password-combination-is-rejected-com-mysql-cj报错" class="headerlink" title="idea连接数据库 The specified database user/password combination is rejected: com.mysql.cj报错"></a>idea连接数据库 The specified database user/password combination is rejected: com.mysql.cj报错</h2><blockquote><p>报错如下图：</p></blockquote><img src="https://s2.loli.net/2022/05/26/vyXs1GZLY7REqrh.png" style="zoom:50%;"><blockquote><p>解决方法：更换链接地址</p></blockquote><p><em><strong>jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>快捷键</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis学习整理</title>
    <link href="/2022/05/15/Redis%20%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <url>/2022/05/15/Redis%20%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h1><ol><li>一个高性能的 key-value 数据库。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。</li></ol><h1 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h1><ol><li><p><strong>String（字符串）</strong></p><p>实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; SET runoob <span class="hljs-string">&quot;菜鸟教程&quot;</span><br>OK<br>redis 127.0.0.1:6379&gt; GET runoob<br><span class="hljs-string">&quot;菜鸟教程&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Hash（哈希）</strong></p><p>实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; HMSET runoob field1 <span class="hljs-string">&quot;Hello&quot;</span> field2 <span class="hljs-string">&quot;World&quot;</span><br><span class="hljs-string">&quot;OK&quot;</span><br>redis 127.0.0.1:6379&gt; HGET runoob field1<br><span class="hljs-string">&quot;Hello&quot;</span><br>redis 127.0.0.1:6379&gt; HGET runoob field2<br><span class="hljs-string">&quot;World&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>List（列表）</strong></p><p>实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; lpush runoob redis<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; lpush runoob mongodb<br>(<span class="hljs-built_in">integer</span>) 2<br>redis 127.0.0.1:6379&gt; lpush runoob rabbitmq<br>(<span class="hljs-built_in">integer</span>) 3<br>redis 127.0.0.1:6379&gt; lrange runoob 0 10<br>1) <span class="hljs-string">&quot;rabbitmq&quot;</span><br>2) <span class="hljs-string">&quot;mongodb&quot;</span><br>3) <span class="hljs-string">&quot;redis&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Set（集合）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; sadd runoob redis<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; sadd runoob mongodb<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; sadd runoob rabbitmq<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; sadd runoob rabbitmq<br>(<span class="hljs-built_in">integer</span>) 0<br>redis 127.0.0.1:6379&gt; smembers runoob<br></code></pre></td></tr></table></figure><p><em>注意：以上实例中 rabbitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</em></p></li><li><p><strong>zset(sorted set：有序集合)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; zadd runoob 0 redis<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; zadd runoob 0 mongodb<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; zadd runoob 0 rabbitmq<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; zadd runoob 0 rabbitmq<br>(<span class="hljs-built_in">integer</span>) 0<br>redis 127.0.0.1:6379&gt; ZRANGEBYSCORE runoob 0 1000<br>1) <span class="hljs-string">&quot;mongodb&quot;</span><br>2) <span class="hljs-string">&quot;rabbitmq&quot;</span><br>3) <span class="hljs-string">&quot;redis&quot;</span><br></code></pre></td></tr></table></figure><p><em>redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</em></p></li></ol><hr><h1 id="Redis-键-key"><a href="#Redis-键-key" class="headerlink" title="Redis 键(key)"></a>Redis 键(key)</h1><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basg">redis 127.0.0.1:6379&gt; COMMAND KEY_NAME<br></code></pre></td></tr></table></figure><p> Redis 键相关的基本命令：</p><ol><li><p>DEL key<br>该命令用于在 key 存在时删除 key。</p></li><li><p>EXISTS key<br>检查给定 key 是否存在。</p></li><li><p>EXPIRE key seconds </p><p>为给定 key 设置过期时间，以秒计。</p></li><li><p>TTL key<br>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</p></li><li><p>RENAME key newkey<br>修改 key 的名称</p></li><li><p>TYPE key<br>返回 key 所储存的值的类型。</p></li></ol><h1 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h1><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; COMMAND KEY_NAME<br></code></pre></td></tr></table></figure><p>Redis 字符串命令</p><ol><li><p>SET key value<br>设置指定 key 的值。</p></li><li><p>GET key<br>获取指定 key 的值。</p></li><li><p>MSET key value [key value …]<br>同时设置一个或多个 key-value 对。</p></li><li><p>MGET key1 [key2..]<br>获取所有(一个或多个)给定 key 的值。</p></li><li><p> STRLEN key </p></li></ol><p>   返回 key 所储存的字符串值的长度。</p><ol start="6"><li> APPEND key value </li></ol><p>   如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</p><h1 id="Redis-哈希-Hash"><a href="#Redis-哈希-Hash" class="headerlink" title="Redis 哈希(Hash)"></a>Redis 哈希(Hash)</h1><p><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt;  HMSET runoobkey name <span class="hljs-string">&quot;redis tutorial&quot;</span> description <span class="hljs-string">&quot;redis basic commands for caching&quot;</span> likes 20 visitors 23000<br>OK<br>127.0.0.1:6379&gt;  HGETALL runoobkey<br>1) <span class="hljs-string">&quot;name&quot;</span><br>2) <span class="hljs-string">&quot;redis tutorial&quot;</span><br>3) <span class="hljs-string">&quot;description&quot;</span><br>4) <span class="hljs-string">&quot;redis basic commands for caching&quot;</span><br>5) <span class="hljs-string">&quot;likes&quot;</span><br>6) <span class="hljs-string">&quot;20&quot;</span><br>7) <span class="hljs-string">&quot;visitors&quot;</span><br>8) <span class="hljs-string">&quot;23000&quot;</span><br></code></pre></td></tr></table></figure><p>redis hash 基本的相关命令：</p><ol><li> HSET key field value </li></ol><p>   将哈希表 key 中的字段 field 的值设为 value 。</p><ol start="2"><li><p>HDEL key field1 [field2]<br>删除一个或多个哈希表字段</p></li><li><p>HGET key field<br>获取存储在哈希表中指定字段的值。</p></li><li><p> HGETALL key </p></li></ol><p>   获取在哈希表中指定 key 的所有字段和值</p><ol start="5"><li><p>HDEL key field1 [field2]<br>删除一个或多个哈希表字段</p></li><li><p> HSCAN key cursor [MATCH pattern] [COUNT count] </p></li></ol><p>   迭代哈希表中的键值对。</p><h1 id="Redis-列表-List"><a href="#Redis-列表-List" class="headerlink" title="Redis 列表(List)"></a>Redis 列表(List)</h1><p><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; LPUSH runoobkey redis<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; LPUSH runoobkey mongodb<br>(<span class="hljs-built_in">integer</span>) 2<br>redis 127.0.0.1:6379&gt; LPUSH runoobkey mysql<br>(<span class="hljs-built_in">integer</span>) 3<br>redis 127.0.0.1:6379&gt; LRANGE runoobkey 0 10<br><br>1) <span class="hljs-string">&quot;mysql&quot;</span><br>2) <span class="hljs-string">&quot;mongodb&quot;</span><br>3) <span class="hljs-string">&quot;redis&quot;</span><br></code></pre></td></tr></table></figure><p>列表相关的基本命令：</p><ol><li><p>RPUSH key value1 [value2]<br>在列表中添加一个或多个值</p></li><li><p>LPUSH key value1 [value2]</p><p>将一个或多个值插入到列表头部</p></li><li><p>LINSERT key BEFORE|AFTER pivot value<br>在列表的元素前或者后插入元素</p></li><li><p>LINDEX key index<br>通过索引获取列表中的元素</p></li><li><p>LRANGE key start stop<br>获取列表指定范围内的元素</p></li><li><p>LREM key count value<br>移除列表元素</p></li></ol><h1 id="Redis-集合-Set"><a href="#Redis-集合-Set" class="headerlink" title="Redis 集合(Set)"></a>Redis 集合(Set)</h1><p><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; SADD runoobkey redis<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; SADD runoobkey mongodb<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; SADD runoobkey mysql<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; SADD runoobkey mysql<br>(<span class="hljs-built_in">integer</span>) 0<br>redis 127.0.0.1:6379&gt; SMEMBERS runoobkey<br><br>1) <span class="hljs-string">&quot;mysql&quot;</span><br>2) <span class="hljs-string">&quot;mongodb&quot;</span><br>3) <span class="hljs-string">&quot;redis&quot;</span><br></code></pre></td></tr></table></figure><p>Redis 集合基本命令：</p><ol><li><p>SADD key member1 [member2]</p><p>向集合添加一个或多个成员</p></li><li><p> SMEMBERS key </p></li></ol><p>   返回集合中的所有成员</p><ol start="3"><li><p>SINTER key1 [key2]</p><p>返回给定所有集合的交集</p></li><li><p>SDIFF key1 [key2]<br>返回第一个集合与其他集合之间的差异。</p></li><li><p> SCARD key </p></li></ol><p>   获取集合的成员数</p><ol start="6"><li>SSCAN key cursor [MATCH pattern] [COUNT count]<br>迭代集合中的元素</li></ol><h1 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h1><p><em>每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</em></p><p><em>有序集合的成员是唯一的,但分数(score)却可以重复。</em></p><p><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; ZADD runoobkey 1 redis<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; ZADD runoobkey 2 mongodb<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql<br>(<span class="hljs-built_in">integer</span>) 1<br>redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql<br>(<span class="hljs-built_in">integer</span>) 0<br>redis 127.0.0.1:6379&gt; ZADD runoobkey 4 mysql<br>(<span class="hljs-built_in">integer</span>) 0<br>redis 127.0.0.1:6379&gt; ZRANGE runoobkey 0 10 WITHSCORES<br><br>1) <span class="hljs-string">&quot;redis&quot;</span><br>2) <span class="hljs-string">&quot;1&quot;</span><br>3) <span class="hljs-string">&quot;mongodb&quot;</span><br>4) <span class="hljs-string">&quot;2&quot;</span><br>5) <span class="hljs-string">&quot;mysql&quot;</span><br>6) <span class="hljs-string">&quot;4&quot;</span><br></code></pre></td></tr></table></figure><p>redis 有序集合的基本命令:</p><ol><li><p>ZADD key score1 member1 [score2 member2]<br>向有序集合添加一个或多个成员，或者更新已存在成员的分数</p></li><li><p>ZINCRBY key increment member<br>有序集合中对指定成员的分数加上增量 increment</p></li><li><p>ZCARD key<br>获取有序集合的成员数</p></li><li><p>ZRANGE key start stop [WITHSCORES]<br>通过索引区间返回有序集合指定区间内的成员</p></li><li><p> ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</p></li></ol><p>   通过分数返回有序集合指定区间内的成员</p><ol start="6"><li>ZREM key member [member …]<br>移除有序集合中的一个或多个成员</li></ol><h1 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h1><p><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; MULTI<br>OK<br><br>redis 127.0.0.1:6379&gt; SET book-name <span class="hljs-string">&quot;Mastering C++ in 21 days&quot;</span><br>QUEUED<br><br>redis 127.0.0.1:6379&gt; GET book-name<br>QUEUED<br><br>redis 127.0.0.1:6379&gt; SADD tag <span class="hljs-string">&quot;C++&quot;</span> <span class="hljs-string">&quot;Programming&quot;</span> <span class="hljs-string">&quot;Mastering Series&quot;</span><br>QUEUED<br><br>redis 127.0.0.1:6379&gt; SMEMBERS tag<br>QUEUED<br><br>redis 127.0.0.1:6379&gt; EXEC<br>1) OK<br>2) <span class="hljs-string">&quot;Mastering C++ in 21 days&quot;</span><br>3) (<span class="hljs-built_in">integer</span>) 3<br>4) 1) <span class="hljs-string">&quot;Mastering Series&quot;</span><br>   2) <span class="hljs-string">&quot;C++&quot;</span><br>   3) <span class="hljs-string">&quot;Programming&quot;</span><br></code></pre></td></tr></table></figure><p><em><strong>这是官网上的说明 From redis docs on <a href="http://redis.io/topics/transactions">transactions</a>:</strong></em></p><p><em>It’s important to note that even when a command fails, all the other commands in the queue are processed – Redis will not stop the processing of commands.</em></p><p> redis 事务的相关命令：</p><ol><li> DISCARD </li></ol><p>   取消事务，放弃执行事务块内的所有命令。</p><ol start="2"><li> EXEC </li></ol><p>   执行所有事务块内的命令。</p><ol start="3"><li> MULTI </li></ol><p>   标记一个事务块的开始。</p><h1 id="Redis-连接"><a href="#Redis-连接" class="headerlink" title="Redis 连接"></a>Redis 连接</h1><p>redis 连接的基本命令：</p><ol><li> AUTH password </li></ol><p>   验证密码是否正确</p><ol start="2"><li><p>PING<br>查看服务是否运行</p></li><li><p>QUIT<br>关闭当前连接</p></li></ol><h1 id="Redis-数据备份与恢复"><a href="#Redis-数据备份与恢复" class="headerlink" title="Redis 数据备份与恢复"></a>Redis 数据备份与恢复</h1><ol><li><p>备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis 127.0.0.1:6379&gt; SAVE <br>OK<br></code></pre></td></tr></table></figure><p><em>该命令将在 redis 安装目录中创建dump.rdb文件。</em></p></li><li><p>恢复</p></li></ol><h1 id="Redis-安全"><a href="#Redis-安全" class="headerlink" title="Redis 安全"></a>Redis 安全</h1><p>通过以下命令查看是否设置了密码验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; CONFIG get requirepass<br>1) <span class="hljs-string">&quot;requirepass&quot;</span><br>2) <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>通过以下命令来设置密码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; CONFIG <span class="hljs-built_in">set</span> requirepass <span class="hljs-string">&quot;runoob&quot;</span><br>OK<br></code></pre></td></tr></table></figure><p>密码验证命令语法格式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; AUTH <span class="hljs-string">&quot;runoob&quot;</span><br>OK<br></code></pre></td></tr></table></figure><h1 id="Redis相关问题"><a href="#Redis相关问题" class="headerlink" title="Redis相关问题"></a>Redis相关问题</h1><h2 id="redis中hash的命令如hmset和hmget是什么意思（解析单词缩写，帮助记忆）"><a href="#redis中hash的命令如hmset和hmget是什么意思（解析单词缩写，帮助记忆）" class="headerlink" title="redis中hash的命令如hmset和hmget是什么意思（解析单词缩写，帮助记忆）"></a>redis中hash的命令如hmset和hmget是什么意思（解析单词缩写，帮助记忆）</h2><ol><li>h表示hash的缩写；</li><li>m表示multi的缩写；</li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven介绍</title>
    <link href="/2022/05/14/Maven%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/05/14/Maven%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h1><p>Maven是一个Java项目管理和构建工具，它可以定义项目结构、项目依赖，并使用统一的方式进行自动化构建，是Java项目不可缺少的工具。</p><hr><h2 id="Maven介绍"><a href="#Maven介绍" class="headerlink" title="Maven介绍"></a>Maven介绍</h2><ol><li><p>一个使用Maven管理的普通的Java项目，它的目录结构默认如下：</p><p><img src="/2022/05/14/Maven%E4%BB%8B%E7%BB%8D/Blog\source_posts\MavenDescription\image-20220419165550723.png"></p></li></ol><p>存放Java源码的目录是<code>src/main/java</code>，存放资源文件的目录是<code>src/main/resources</code>，存放测试源码的目录是<code>src/test/java</code>，存放测试资源的目录是<code>src/test/resources</code>，最后，所有编译、打包生成的文件都放在<code>target</code>目录里。</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ol><li><p>Maven解决了依赖管理问题。例如，我们的项目依赖<code>abc</code>这个jar包，而<code>abc</code>又依赖<code>xyz</code>这个jar包：</p><p><img src="/2022/05/14/Maven%E4%BB%8B%E7%BB%8D/Blog\source_posts\MavenDescription\image-20220419170045724.png"></p><p>​    当我们声明了<code>abc</code>的依赖时，Maven自动把<code>abc</code>和<code>xyz</code>都加入了我们的项目依赖，不需要我们自己去研究<code>abc</code>是否需要依赖<code>xyz</code>。</p></li><li><p>依赖关系</p><p>Maven定义了几种依赖关系，分别是<code>compile</code>、<code>test</code>、<code>runtime</code>和<code>provided</code>：</p><table><thead><tr><th align="left">scope</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">编译时需要用到该jar包（默认）</td><td align="left">commons-logging</td></tr><tr><td align="left">test</td><td align="left">编译Test时需要用到该jar包</td><td align="left">junit</td></tr><tr><td align="left">runtime</td><td align="left">编译时不需要，但运行时需要用到</td><td align="left">mysql</td></tr><tr><td align="left">provided</td><td align="left">编译时需要用到，但运行时由JDK或某个服务器提供</td><td align="left">servlet-api</td></tr></tbody></table></li><li><p>唯一ID</p><p>对于某个依赖，Maven只需要3个变量即可唯一确定某个jar包：</p><ul><li>groupId：属于组织的名称，类似Java的包名；</li><li>artifactId：该jar包自身的名称，类似Java的类名；</li><li>version：该jar包的版本。</li></ul></li><li><p>Maven镜像</p><p>中国区用户可以使用阿里云提供的Maven镜像仓库。使用Maven镜像仓库需要一个配置，在用户主目录下进入<code>.m2</code>目录，创建一个<code>settings.xml</code>配置文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 国内推荐阿里云的Maven镜像 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>搜索第三方组件</p><p>最后一个问题：如果我们要引用一个第三方组件，比如<code>okhttp</code>，如何确切地获得它的<code>groupId</code>、<code>artifactId</code>和<code>version</code>？方法是通过<a href="https://search.maven.org/">search.maven.org</a>搜索关键字，找到对应的组件后，直接复制</p></li></ol><p><strong>小结</strong></p><p>Maven通过解析依赖关系确定项目所需的jar包，常用的4种<code>scope</code>有：<code>compile</code>（默认），<code>test</code>，<code>runtime</code>和<code>provided</code>；</p><p>Maven从中央仓库下载所需的jar包并缓存在本地；</p><p>可以通过镜像仓库加速下载。</p>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringAOP学习整理</title>
    <link href="/2022/05/14/SpringAOP%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <url>/2022/05/14/SpringAOP%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"># 对AOP的初印象<p><img src="https://img-blog.csdn.net/20180530172528617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E5ODIxNTE3NTY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><h1 id="AOP中的相关概念"><a href="#AOP中的相关概念" class="headerlink" title="AOP中的相关概念"></a>AOP中的相关概念</h1><ul><li><p>Aspect（切面）： Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</p></li><li><p>Joint point（连接点）：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</p></li><li><p>Pointcut（切点）：表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</p></li><li><p>Advice（增强）：Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。</p></li><li><p>Target（目标对象）：织入 Advice 的目标对象.。</p></li><li><p>Weaving（织入）：将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程</p><img src="https://img-blog.csdn.net/20180530175605692?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E5ODIxNTE3NTY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="zoom: 67%;"></li></ul><h1 id="Advice-的类型"><a href="#Advice-的类型" class="headerlink" title="Advice 的类型"></a>Advice 的类型</h1><ul><li>before advice, 在 join point 前被执行的 advice. 虽然 before advice 是在 join point 前被执行, 但是它并不能够阻止 join point 的执行, 除非发生了异常(即我们在 before advice 代码中, 不能人为地决定是否继续执行 join point 中的代码)</li><li>after return advice, 在一个 join point 正常返回后执行的 advice</li><li>after throwing advice, 当一个 join point 抛出异常后执行的 advice</li><li>after(final) advice, 无论一个 join point 是正常退出还是发生了异常, 都会被执行的 advice.</li><li>around advice, 在 join point 前和 joint point 退出后都执行的 advice. 这个是最常用的 advice.</li><li>introduction，introduction可以为原有的对象增加新的属性和方法。</li></ul><h1 id="在Java平台上，对于AOP的织入，有3种方式："><a href="#在Java平台上，对于AOP的织入，有3种方式：" class="headerlink" title="在Java平台上，对于AOP的织入，有3种方式："></a>在Java平台上，对于AOP的织入，有3种方式：</h1><ol><li>编译期：在编译时，由编译器把切面调用编译进字节码，这种方式需要定义新的关键字并扩展编译器，AspectJ就扩展了Java编译器，使用关键字aspect来实现织入；</li><li>类加载器：在目标类被装载到JVM时，通过一个特殊的类加载器，对目标类的字节码重新“增强”；</li><li>运行期：目标对象和切面都是普通Java类，通过JVM的动态代理功能或者第三方库实现运行期动态织入。</li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC:文件上传和下载功能</title>
    <link href="/2022/05/14/SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2022/05/14/SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="SpringMVC-文件上传和下载功能"><a href="#SpringMVC-文件上传和下载功能" class="headerlink" title="SpringMVC:文件上传和下载功能"></a>SpringMVC:文件上传和下载功能</h1><p>前言<br>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。<br>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><hr><ol><li><h2 id="对表单中的-enctype-属性做个详细的说明："><a href="#对表单中的-enctype-属性做个详细的说明：" class="headerlink" title="对表单中的 enctype 属性做个详细的说明："></a>对表单中的 enctype 属性做个详细的说明：</h2><ul><li><p>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</p></li><li><p>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</p></li><li><p>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ul><li><p>1.导入文件上传的jar包，commons-fileupload ， <a href="https://so.csdn.net/so/search?q=Maven&spm=1001.2101.3001.7020">Maven</a>会自动帮我们导入他的依赖包 commons-io包；</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--文件上传--&gt;<br>&lt;dependency&gt;<br>   &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;<br>   &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;<br>   &lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.3</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!--servlet-api导入高版本的--&gt;<br>&lt;dependency&gt;<br>   &lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>   &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;<br>   &lt;version&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>2.配置bean：multipartResolver<br>代码如下（示例）：<br>【注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>CommonsMultipartFile 的 常用方法：</p><p>String getOriginalFilename()：获取上传文件的原名</p><p>InputStream getInputStream()：获取文件流</p><p>void transferTo(File dest)：将上传文件保存到一个目录文件中</p></li><li><p>3.编写前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>4.Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br>   <span class="hljs-comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span><br>   <span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>​ <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span><br>   String uploadFileName = file.getOriginalFilename();<br><br>   <span class="hljs-comment">//如果文件名为空，直接回到首页！</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(uploadFileName))&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>  &#125;<br>   System.out.println(<span class="hljs-string">&quot;上传文件名 : &quot;</span>+uploadFileName);<br><br>   <span class="hljs-comment">//上传路径保存设置</span><br>   String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>   <span class="hljs-comment">//如果路径不存在，创建一个</span><br>   File realPath = <span class="hljs-keyword">new</span> File(path);<br>   <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>       realPath.mkdir();<br>  &#125;<br>   System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>   InputStream is = file.getInputStream(); <span class="hljs-comment">//文件输入流</span><br>   OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span><br><br>   <span class="hljs-comment">//读取写出</span><br>   <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>   <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>       os.write(buffer,<span class="hljs-number">0</span>,len);<br>       os.flush();<br>  &#125;<br>   os.close();<br>   is.close();<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><h2 id="采用file-Transto-来保存上传的文件"><a href="#采用file-Transto-来保存上传的文件" class="headerlink" title="采用file.Transto 来保存上传的文件"></a>采用file.Transto 来保存上传的文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* 采用file.Transto 来保存上传的文件</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String  <span class="hljs-title">fileUpload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>   <span class="hljs-comment">//上传路径保存设置</span><br>   String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>   File realPath = <span class="hljs-keyword">new</span> File(path);<br>   <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>       realPath.mkdir();<br>  &#125;<br>   <span class="hljs-comment">//上传文件地址</span><br>   System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>   <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br>   file.transferTo(<span class="hljs-keyword">new</span> File(realPath +<span class="hljs-string">&quot;/&quot;</span>+ file.getOriginalFilename()));<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>文件下载步骤：</p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/download&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downloads</span><span class="hljs-params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>   <span class="hljs-comment">//要下载的图片地址</span><br>   String  path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>   String  fileName = <span class="hljs-string">&quot;基础语法.jpg&quot;</span>;<br><br>   <span class="hljs-comment">//1、设置response 响应头</span><br>   response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span><br>   response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">//字符编码</span><br>   response.setContentType(<span class="hljs-string">&quot;multipart/form-data&quot;</span>); <span class="hljs-comment">//二进制传输数据</span><br>   <span class="hljs-comment">//设置响应头</span><br>   response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<br>           <span class="hljs-string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>   File file = <span class="hljs-keyword">new</span> File(path,fileName);<br>   <span class="hljs-comment">//2、 读取文件--输入流</span><br>   InputStream input=<span class="hljs-keyword">new</span> FileInputStream(file);<br>   <span class="hljs-comment">//3、 写出文件--输出流</span><br>   OutputStream out = response.getOutputStream();<br><br>   <span class="hljs-keyword">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>   <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>   <span class="hljs-comment">//4、执行 写出操作</span><br>   <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>)&#123;<br>       out.write(buff, <span class="hljs-number">0</span>, index);<br>       out.flush();<br>  &#125;<br>   out.close();<br>   input.close();<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>————————————————<br>版权声明：本文为CSDN博主「南风<span class="hljs-number">1789</span>」的原创文章，遵循CC <span class="hljs-number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/southwindpass/article/details/113980739</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>spring MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring MVC企业面试题</title>
    <link href="/2022/05/14/Spring%20MVC%E4%BC%81%E4%B8%9A%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/05/14/Spring%20MVC%E4%BC%81%E4%B8%9A%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Spring-MVC企业面试题"><a href="#Spring-MVC企业面试题" class="headerlink" title="Spring MVC企业面试题"></a><strong>Spring MVC企业面试题</strong></h1><hr><hr><h2 id="一-简要概述一下Spring-MVC框架？"><a href="#一-简要概述一下Spring-MVC框架？" class="headerlink" title="一.简要概述一下Spring MVC框架？"></a>一.简要概述一下Spring MVC框架？</h2><p>Spring MVC 是 Spring 提供的一个基于 MVC 设计模式的轻量级 Web 开发框架，本质上相当于 Servlet。<br>Spring MVC 角色划分清晰，分工明细。由于 Spring MVC 本身就是 Spring 框架的一部分，可以说和 Spring 框架是无缝集成。性能方面具有先天的优越性，是当今业界最主流的 Web 开发框架，最热门的开发技能。</p><h2 id="二-介绍一下MVC设计模式？"><a href="#二-介绍一下MVC设计模式？" class="headerlink" title="二.介绍一下MVC设计模式？"></a>二.介绍一下MVC设计模式？</h2><p>MVC 设计模式一般指 MVC 框架，M（Model）指数据模型层，V（View）指视图层，C（Controller）指控制层。使用 MVC 的目的是将 M 和 V 的实现代码分离，使同一个程序可以有不同的表现形式。其中，View 的定义比较清晰，就是用户界面。<br><img src="http://c.biancheng.net/uploads/allimg/210705/1130462557-1.png" alt="spring+jsp+servlet"></p><h2 id="三-请举例通过一个demo建立简单的spring-mvc程序？"><a href="#三-请举例通过一个demo建立简单的spring-mvc程序？" class="headerlink" title="三 请举例通过一个demo建立简单的spring mvc程序？"></a>三 请举例通过一个demo建立简单的spring mvc程序？</h2><p>创建步骤</p><ol><li>创建 Web 应用并引入 JAR 包，本教程 Spring 使用版本为 5.2.3</li></ol><figure class="highlight java"><figcaption><span><?xml version</span></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;web-app xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>    xmlns=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> xmlns:web=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><br>    xsi:schemaLocation=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span><br>    version=<span class="hljs-string">&quot;3.0&quot;</span>&gt;<br>    &lt;display-name&gt;springMVC&lt;/display-name&gt;<br>    &lt;!-- 部署 DispatcherServlet --&gt;<br>    &lt;servlet&gt;<br>        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;<br>        &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">DispatcherServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">        &lt;!-- 表示容器再启动时立即加载<span class="hljs-title">servlet</span> --&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">load</span>-<span class="hljs-title">on</span>-<span class="hljs-title">startup</span>&gt;1&lt;/<span class="hljs-title">load</span>-<span class="hljs-title">on</span>-<span class="hljs-title">startup</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">springmvc</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">        &lt;!-- 处理所有<span class="hljs-title">URL</span> --&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">web</span>-<span class="hljs-title">app</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Spring MVC 配置：在 web.xml 中配置 Servlet，创建 Spring MVC 的配置文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">在 WEB-INF 目录下创建 springmvc-servlet.xml 文件，如下所示。<br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;</span><br><span class="hljs-string">        http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br>    &lt;!-- LoginController控制器类，映射到<span class="hljs-string">&quot;/login&quot;</span> --&gt;<br>    &lt;bean name=<span class="hljs-string">&quot;/login&quot;</span><br>          <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;net.biancheng.controller.LoginController&quot;</span>/&gt;<br>    &lt;!-- LoginController控制器类，映射到<span class="hljs-string">&quot;/register&quot;</span> --&gt;<br>    &lt;bean name=<span class="hljs-string">&quot;/register&quot;</span><br>          <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;net.biancheng.controller.RegisterController&quot;</span>/&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure></li><li>创建 Controller（处理请求的控制器）</li><li>创建 View（本教程使用 JSP 作为视图）</li><li>部署运行</li></ol><h2 id="四-介绍一下Spring-MVC视图解析器（ViewResolver）？"><a href="#四-介绍一下Spring-MVC视图解析器（ViewResolver）？" class="headerlink" title="四 介绍一下Spring MVC视图解析器（ViewResolver）？"></a>四 介绍一下Spring MVC视图解析器（ViewResolver）？</h2><p>视图解析器（ViewResolver）是 Spring MVC 的重要组成部分，负责将逻辑视图名解析为具体的视图对象。<br>Spring MVC 提供了很多视图解析类，其中每一项都对应 Java Web 应用中特定的某些视图技术。下面介绍一些常用的视图解析类。</p><ol><li>URLBasedViewResolver<br>UrlBasedViewResolver 通过 prefix 属性指定前缀，suffix 属性指定后缀。当 ModelAndView 对象返回具体的 View 名称时，它会将前缀 prefix 和后缀 suffix 与具体的视图名称拼接，得到一个视图资源文件的具体加载路径，从而加载真正的视图文件并反馈给用户。<br>使用 UrlBasedViewResolver 除了要配置前缀和后缀属性之外，还需要配置“viewClass”，表示解析成哪种视图。示例代码如下。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;</span>&gt;            <br> &lt;property name=<span class="hljs-string">&quot;viewClass&quot;</span> value=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>/&gt; &lt;!--不能省略--&gt;<br> &lt;!--前缀--&gt;<br> &lt;property name=<span class="hljs-string">&quot;prefix&quot;</span> value=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;<br> &lt;!--后缀--&gt;<br> &lt;property name=<span class="hljs-string">&quot;suffix&quot;</span> value=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;  <br> &lt;/bean&gt;<br></code></pre></td></tr></table></figure>上述 viewClass 值为 InternalResourceViewResolver，它用来展示 JSP 页面。如果需要使用 jstl 标签展示数据，将 viewClass 属性值指定为 JstlView 即可。</li><li>InternalResourceViewResolver</li></ol><h2 id="五-介绍一下Spring-MVC执行流程？"><a href="#五-介绍一下Spring-MVC执行流程？" class="headerlink" title="五 介绍一下Spring MVC执行流程？"></a>五 介绍一下Spring MVC执行流程？</h2><p><img src="http://c.biancheng.net/uploads/allimg/210705/1139441444-0.png" alt="Spring MVC执行流程"><br>SpringMVC 的执行流程如下。</p><ol><li>用户点击某个请求路径，发起一个 HTTP request 请求，该请求会被提交到 DispatcherServlet（前端控制器）；</li><li>由 DispatcherServlet 请求一个或多个 HandlerMapping（处理器映射器），并返回一个执行链（HandlerExecutionChain）。</li><li>DispatcherServlet 将执行链返回的 Handler 信息发送给 HandlerAdapter（处理器适配器）；</li><li>HandlerAdapter 根据 Handler 信息找到并执行相应的 Handler（常称为 Controller）；</li><li>Handler 执行完毕后会返回给 HandlerAdapter 一个 ModelAndView 对象（Spring MVC的底层对象，包括 Model 数据模型和 View 视图信息）；</li><li>HandlerAdapter 接收到 ModelAndView 对象后，将其返回给 DispatcherServlet ；</li><li>DispatcherServlet 接收到 ModelAndView 对象后，会请求 ViewResolver（视图解析器）对视图进行解析；</li><li>ViewResolver 根据 View 信息匹配到相应的视图结果，并返回给 DispatcherServlet；</li><li>DispatcherServlet 接收到具体的 View 视图后，进行视图渲染，将 Model 中的模型数据填充到 View 视图中的 request 域，生成最终的 View（视图）；</li><li>视图负责将结果显示到浏览器（客户端）。</li></ol><h2 id="六-介绍一下Spring-MVC-Controller和-RequestMapping注解？"><a href="#六-介绍一下Spring-MVC-Controller和-RequestMapping注解？" class="headerlink" title="六 介绍一下Spring MVC @Controller和@RequestMapping注解？"></a>六 介绍一下Spring MVC @Controller和@RequestMapping注解？</h2><ol><li>Controller注解<br>@Controller 注解用于声明某类的实例是一个控制器。例如，在 net.biancheng.controller 包中创建控制器类 IndexController，示例代码如下。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">package</span> net.biancheng.controller;<br>   <span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br>   <span class="hljs-meta">@Controller</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> </span>&#123;<br>    <span class="hljs-comment">// 处理请求的方法</span><br>   &#125;<br><span class="hljs-number">2.</span> RequestMapping注解<br>   一个控制器内有多个处理请求的方法，如 UserController 里通常有增加用户、修改用户信息、删除指定用户、根据条件获取用户列表等。每个方法负责不同的请求操作，而 <span class="hljs-meta">@RequestMapping</span> 就负责将请求映射到对应的控制器方法上。<br>   在基于注解的控制器类中可以为每个请求编写对应的处理方法。使用 <span class="hljs-meta">@RequestMapping</span> 注解将请求与处理方法一 一对应即可。<br>   <span class="hljs-meta">@RequestMapping</span> 注解可用于类或方法上。用于类上，表示类中的所有响应请求的方法都以该地址作为父路径。<br><br>## 七 说说Spring MVC传递参数的几种方式？<br>Spring MVC Controller 接收请求参数的方式有很多种，有的适合 get 请求方式，有的适合 post 请求方式，有的两者都适合。主要有以下几种方式：<br><span class="hljs-number">1.</span> 通过实体 Bean 接收请求参数<br><span class="hljs-number">2.</span> 通过处理方法的形参接收请求参数<br><span class="hljs-number">3.</span> 通过 HttpServletRequest 接收请求参数<br><span class="hljs-number">4.</span> 通过 <span class="hljs-meta">@PathVariable</span> 接收 URL 中的请求参数<br><span class="hljs-number">5.</span> 通过 <span class="hljs-meta">@RequestParam</span> 接收请求参数<br><span class="hljs-number">6.</span> 通过 <span class="hljs-meta">@ModelAttribute</span> 接收请求参数<br><br>## 八 叙述一下Spring MVC重定向和转发？它们是怎么实现的？<br>Spring MVC 请求方式分为转发、重定向 <span class="hljs-number">2</span> 种，分别使用 forward 和 redirect 关键字在 controller 层进行处理。<br>在 Spring MVC 框架中，重定向与转发的示例代码如下：<br>```java <br><span class="hljs-keyword">package</span> net.biancheng.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//转发到一个请求方法（同一个控制器类可以省略/index/）</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/index/isLogin&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/isLogin&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">isLogin</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//重定向到一个请求方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index/isRegister&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/isRegister&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">isRegister</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//转发到一个视图</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;register&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="九-说说Spring-MVC-Autowired和-Service注解？"><a href="#九-说说Spring-MVC-Autowired和-Service注解？" class="headerlink" title="九 说说Spring MVC @Autowired和@Service注解？"></a>九 说说Spring MVC @Autowired和@Service注解？</h2><p>将依赖注入到 Spring MVC 控制器时需要用到 @Autowired 和 @Service 注解。<br>@Autowired 注解属于 org.springframework.beans.factory. annotation 包，可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。<br>@Service 注解属于 org.springframework.stereotype 包，会将标注类自动注册到 Spring 容器中。<br>在配置文件中需要添加 <component-scan> 元素来扫描依赖基本包。<br>&lt;context:component-scan base-package=”net.biancheng.service”/&gt;</component-scan></p><h2 id="十-说说Spring-MVC-ModelAttribute注解？"><a href="#十-说说Spring-MVC-ModelAttribute注解？" class="headerlink" title="十 说说Spring MVC @ModelAttribute注解？"></a>十 说说Spring MVC @ModelAttribute注解？</h2><p>在 Controller 中使用 @ModelAttribute 时，有以下几种应用情况。</p><ol><li>应用在方法上<ol><li>应用在无返回值的方法```java package net.biancheng.controller;</li></ol></li></ol><p>import org.springframework.stereotype.Controller;<br>import org.springframework.ui.Model;<br>import org.springframework.web.bind.annotation.ModelAttribute;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;</p><p>@Controller<br>public class ModelAttributeController {<br>    // 方法无返回值<br>    @ModelAttribute<br>    public void myModel(@RequestParam(required = false) String name, Model model) {<br>        model.addAttribute(“name”, name);<br>    }</p><pre><code>@RequestMapping(value = &quot;/model&quot;)public String model() &#123;    return &quot;index&quot;;&#125;</code></pre><p>}<br>2. 应用在有返回值的方法</p><p>   ```java package net.biancheng.controller;</p><p>import org.springframework.stereotype.Controller;<br>import org.springframework.ui.Model;<br>import org.springframework.web.bind.annotation.ModelAttribute;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;</p><p>@Controller<br>public class ModelAttributeController {<br>    // 方法有返回值<br>    @ModelAttribute(“name”)<br>    public String myModel(@RequestParam(required = false) String name) {</p><pre><code>    return name;&#125;@RequestMapping(value = &quot;/model&quot;)public String model() &#123;    return &quot;index&quot;;&#125;</code></pre><p>}<br>2. 应用在方法的参数上<br>    @ModelAttribute 注解在方法的参数上，调用方法时，模型的值会被注入。这在实际使用时非常简单，常用于将表单属性映射到模型对象。<br>3. 应用在方法上，并且方法也使用了 @RequestMapping<br>   @ModelAttribute 和 @RequestMapping 注解同时应用在方法上时，有以下作用：</p><ol><li>方法的返回值会存入到 Model 对象中，key 为 ModelAttribute 的 value 属性值。</li><li>方法的返回值不再是方法的访问路径，访问路径会变为 @RequestMapping 的 value 值，例如：@RequestMapping(value = “/index”) 跳转的页面是 index.jsp 页面。<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>InternalResourceViewResolver 为“内部资源视图解析器”，是日常开发中最常用的视图解    析器类型。它是 URLBasedViewResolver 的子类，拥有 URLBasedViewResolver 的一切特性。<br>    使用 InternalResourceViewResolver 视图解析时，无需再单独指定 viewClass 属性。示例代码如下。<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;<br> &lt;property name=<span class="hljs-string">&quot;viewClass&quot;</span> value=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>/&gt; &lt;!--可以省略--&gt;<br> &lt;!--前缀--&gt;<br> &lt;property name=<span class="hljs-string">&quot;prefix&quot;</span> value=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;<br> &lt;!--后缀--&gt;<br> &lt;property name=<span class="hljs-string">&quot;suffix&quot;</span> value=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;  <br> &lt;/bean&gt;<br></code></pre></td></tr></table></figure><br>3. FreeMarkerViewResolver<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>FreeMarkerViewResolver 最终会解析逻辑视图配置，返回 freemarker 模板。不需要指定 viewClass 属性。<br>   FreeMarkerViewResolver 配置如下。<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;</span>&gt;    &lt;property name=<span class="hljs-string">&quot;prefix&quot;</span> value=<span class="hljs-string">&quot;fm_&quot;</span>/&gt;    &lt;property name=<span class="hljs-string">&quot;suffix&quot;</span> value=<span class="hljs-string">&quot;.ftl&quot;</span>/&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><br><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>spring MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速学习时序图：时序图简介、画法及实例</title>
    <link href="/2022/05/14/UML%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/"/>
    <url>/2022/05/14/UML%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="快速学习时序图：时序图简介、画法及实例"><a href="#快速学习时序图：时序图简介、画法及实例" class="headerlink" title="快速学习时序图：时序图简介、画法及实例"></a><strong>快速学习时序图：时序图简介、画法及实例</strong></h1><h2 id="组成元素有哪些？"><a href="#组成元素有哪些？" class="headerlink" title="组成元素有哪些？"></a><strong>组成元素有哪些？</strong></h2><ol><li><p>角色（Actor）</p></li><li><p>对象（Object）</p></li><li><p>生命线（Lifeline）</p></li><li><p>控制焦点（Focus of Control）</p></li><li><p>消息（Message）</p></li><li><p>自关联消息</p></li><li><p>组合片段</p><p>组合片段用来解决交互执行的条件和方式，它允许在序列图中直接表示逻辑组件，用于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。组合片段共有13种，名称及含义如下：</p><p><img src="http://www.uml.org.cn/oobject/images/2019092021.png"></p><p>常用组合片段举例：</p><ol><li><p>抉择（Alt）</p><p>抉择在任何场合下只发生一个序列。</p><p><img src="http://www.uml.org.cn/oobject/images/2019092022.png"></p></li><li><p>选项（Opt）</p><p>包含一个可能发生或不发生的序列；</p><p><img src="http://www.uml.org.cn/oobject/images/2019092023.png"></p></li><li><p>循环（Loop）</p><p>片段重复一定次数，可以在临界中指示片段重复的条件。</p><p><img src="http://www.uml.org.cn/oobject/images/2019092024.png"></p></li><li><p>并行（Par）</p><p><img src="http://www.uml.org.cn/oobject/images/2019092025.png"></p></li></ol></li></ol><h2 id="时序图的画法及实例"><a href="#时序图的画法及实例" class="headerlink" title="时序图的画法及实例"></a><strong>时序图的画法及实例</strong></h2><ol><li><p>划清边界，识别交互的语境</p><p>所谓划清边界，就是要界定好自己所要画的时序图的范围，“学生在教务系统中查询其课程的成绩”就是所要绘制的时序图的交互内容，不用往上延伸到用户登录，也不要往下延伸到下载成绩单。</p><p>识别交互的语境，即是读懂所要画的时序图的前提和背景。比如本例中，既然学生可以查询成绩，那么该学生肯定已经注册并认证过其身份，并可选择其所考试的课程查询相应成绩。</p></li><li><p>梳理角色和对象</p><p>在本例中，角色有学生，对象有教务系统、课程、成绩。</p><p>对象的梳理是一个相对主观的过程，比如本例中，课程以及成绩分别作为了对象存在，也可以合并为数据库这一个对象。</p><p>请注意：角色以及对象，都为名词，动词不可作为角色和对象，如“成绩查询”不可作为对象。</p><img src="http://www.uml.org.cn/oobject/images/2019092026.png" style="zoom:50%;"></li><li><p>添加消息</p><p>学生的登录验证作为本时序图的前置行为，可直接引用到本时序图中，也可忽略不画；学生进入成绩查询页面后，页面会加载本学生的成绩查询课程列表，并显示出课程对应的成绩；</p><img src="http://www.uml.org.cn/oobject/images/2019092027.png" style="zoom:50%;"></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何方便的在任意目录下运行Windows命令行</title>
    <link href="/2022/05/14/Windows%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/14/Windows%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="如何方便的在任意目录下运行Windows命令行"><a href="#如何方便的在任意目录下运行Windows命令行" class="headerlink" title="如何方便的在任意目录下运行Windows命令行"></a>如何方便的在任意目录下运行Windows命令行</h1><p>打开想去的目录，空白处，按住shift+鼠标右键，就可以选择在此处打开命令行了。</p><h1 id="windows系统下使用cd命令"><a href="#windows系统下使用cd命令" class="headerlink" title="windows系统下使用cd命令"></a>windows系统下使用cd命令</h1><ol><li><p>输入D:  回车</p><img src="https://s2.loli.net/2022/05/26/vocCuYsR7WiVwQt.png" style="zoom:50%;"></li><li><p>输入cd Program Files 回车</p><img src="https://s2.loli.net/2022/05/26/T2UDK9ou3MfJrs7.png" style="zoom:50%;"></li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客相关问题</title>
    <link href="/2022/05/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><ol><li><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g   <span class="hljs-comment"># 生成页面</span><br>hexo d   <span class="hljs-comment"># 部署发布</span><br></code></pre></td></tr></table></figure></li><li><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: Hello World <span class="hljs-comment"># 标题</span><br>date: 2019/3/26 hh:mm:ss <span class="hljs-comment"># 时间</span><br>categories: <span class="hljs-comment"># 分类</span><br>- Diary<br>tags: <span class="hljs-comment"># 标签</span><br>- PS3<br>- Games<br>---<br><br>摘要<br>&lt;!--more--&gt;<br>正文<br></code></pre></td></tr></table></figure></li></ol><hr><h1 id="typora图床设置"><a href="#typora图床设置" class="headerlink" title="typora图床设置"></a>typora图床设置</h1><p>在配置typora图床并设置自动上传时，遇到了如下问题</p><ol><li><p>typora图片上传验证按钮报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chcp<span class="hljs-string">&#x27; is not recognized as an internal or external command, operable program or batch file</span><br></code></pre></td></tr></table></figure><p>解决办法：</p><p>需要在环境变量的系统变量的path后面加;C:\Windows\System32</p><p><img src="https://s2.loli.net/2022/05/15/RVk4TQdihegAE1P.png"></p><p><em>要根据电脑上的system32文件夹的具体路径填入地址，区分大小写。</em></p></li><li><p>typora图片上传验证按钮报错etimedout，如下图</p><p><img src="https://s2.loli.net/2022/05/15/xcG4Zt5qgjm72oW.png" alt="image-20220515220547181"></p><p>排除图片跟图库里重名问题</p><blockquote><p> 解决方法：</p></blockquote><ol><li><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#picgo-server%E8%AE%BE%E7%BD%AE">*2.2版本之后，PicGo内部会默认开启一个小型的服务器，用于配合其他应用来调用PicGo进行上传。监听的地址推荐就默认的 <code>127.0.0.1</code> （本机），端口推荐默认的 <code>36677</code>。</a>*</p><p><img src="https://s2.loli.net/2022/05/17/FHVl39jDh2WwtfA.png"></p></li><li><p>可能是端口冲突了，我是开着xamap，关闭就可以上传了。</p></li></ol><blockquote><p>如果还是不行，重启picgo中的server，如图：</p></blockquote><p><img src="https://s2.loli.net/2022/05/26/bANfc9ae1sH5Kju.png"></p></li></ol><h1 id="hexo-更新之后总需要重新设置custom-domin"><a href="#hexo-更新之后总需要重新设置custom-domin" class="headerlink" title="hexo 更新之后总需要重新设置custom domin"></a>hexo 更新之后总需要重新设置custom domin</h1><p>在source目录下（不是hexo根目录下），创建一个CNAME文件，可以用sublime创建，然后保存成（All files格式，即不加文件后缀名） CNAME文件里写自己新的域名。</p><p><img src="/2022/05/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/Users\cheng\AppData\Roaming\Typora\typora-user-images\image-20220526161545237.png"></p>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客建设</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用例图怎么画？附4大关系详解</title>
    <link href="/2022/05/14/%E7%94%A8%E4%BE%8B%E5%9B%BE%E6%80%8E%E4%B9%88%E7%94%BB%EF%BC%9F%E9%99%844%E5%A4%A7%E5%85%B3%E7%B3%BB%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/05/14/%E7%94%A8%E4%BE%8B%E5%9B%BE%E6%80%8E%E4%B9%88%E7%94%BB%EF%BC%9F%E9%99%844%E5%A4%A7%E5%85%B3%E7%B3%BB%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="用例图的定义及组成要素"><a href="#用例图的定义及组成要素" class="headerlink" title="用例图的定义及组成要素"></a>用例图的定义及组成要素</h1><p>它主要由三部分组成：<strong>参与者</strong>、<strong>用例</strong>、<strong>参与者与用例之间的关系。</strong></p><p><strong>参与者：</strong>不是特指人，是指系统以外的，在使用系统或与系统交互中所扮演的角色。</p><p><strong>用例：</strong>是对包括变量在内的一组动作序列的描述，系统执行这些动作，并产生传递特定参与者的价值的可观察结果。</p><p><strong>关系：</strong>参与者与用例之间的关系主要包括关联、归纳（泛化）、包含、拓展和依赖。</p><h1 id="参与者与用例的4种关系"><a href="#参与者与用例的4种关系" class="headerlink" title="参与者与用例的4种关系"></a>参与者与用例的4种关系</h1><ol><li><h2 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a><strong>关联关系</strong></h2><p><strong>举例说明：</strong>用户登录系统</p><p><img src="https://pic3.zhimg.com/80/v2-830ec9e117f74c4d1a9dc1776bead9b2_720w.jpg"></p></li><li><h2 id="归纳（泛化）关系"><a href="#归纳（泛化）关系" class="headerlink" title="归纳（泛化）关系"></a><strong>归纳（泛化）关系</strong></h2><p><strong>举例说明：</strong>VIP会员和普通用户，归纳为用户；账号登录与微信登录，也可归纳为登录系统。</p><p><img src="https://pic4.zhimg.com/80/v2-27fcca6ef7b16bdcf2cdf676d9adf7a3_720w.jpg"></p></li><li><h2 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a><strong>包含关系</strong></h2><p><strong>举例说明：</strong>用户在账号登录过程中，包括输入账号、输入密码、确认登录等操作</p><p><img src="https://pic3.zhimg.com/80/v2-d5d0914418cbeb28d987f7f2673febd2_720w.jpg"></p></li><li><h2 id="拓展关系"><a href="#拓展关系" class="headerlink" title="拓展关系"></a><strong>拓展关系</strong></h2><p>举例说明：用户在登录过程中忘记了密码</p><p><img src="https://pic4.zhimg.com/80/v2-e05e2ae3afe5ffea1836352c547f3c13_720w.jpg"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>crm项目相关问题</title>
    <link href="/2022/04/26/crm%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/26/crm%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="SSM框架中应用el和jstl"><a href="#SSM框架中应用el和jstl" class="headerlink" title="SSM框架中应用el和jstl"></a>SSM框架中应用el和jstl</h1><p>el即Expression Language，用来在jsp页面上显示内容，jstl是JSP Standard Tag Library的缩写，包含多种标签，el和jstl结合使用，页面渲染更方便。</p><hr><h2 id="EL内置对象"><a href="#EL内置对象" class="headerlink" title="EL内置对象"></a>EL内置对象</h2><table><thead><tr><th align="left">内置对象</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">pageScope</td><td align="left">获取 page 范围的变量</td></tr><tr><td align="left">requestScope</td><td align="left">获取 request 范围的变量</td></tr><tr><td align="left">sessionScope</td><td align="left">获取 session 范围的变量</td></tr><tr><td align="left">applicationScope</td><td align="left">获取 application 范围的变量</td></tr><tr><td align="left">param</td><td align="left">相当于 request.getParameter(String name)，获取单个参数的值</td></tr><tr><td align="left">paramValues</td><td align="left">相当于 request.getParameterValues(String name)，获取参数集合中的变量值</td></tr><tr><td align="left">header</td><td align="left">相当于 request.getHeader(String name)，获取 HTTP 请求头信息</td></tr><tr><td align="left">headerValues</td><td align="left">相当于 request.getHeaders(String name)，获取 HTTP 请求头数组信息</td></tr><tr><td align="left">initParam</td><td align="left">相当于 application.getInitParameter(String name)，获取 web.xml 文件中的参数值</td></tr><tr><td align="left">cookie</td><td align="left">相当于 request.getCookies()，获取 cookie 中的值</td></tr><tr><td align="left">pageContext</td><td align="left">表示当前 JSP 页面的 pageContext 对象</td></tr></tbody></table><p>EL 表达式获取 4 种不同范围的属性，代码如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;编程帮(www.biancheng.net)&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;%<br>        pageContext.setAttribute(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;page属性范围&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;request属性范围&quot;</span>);<br>        session.setAttribute(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;session属性范围&quot;</span>);<br>        application.setAttribute(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;application属性范围&quot;</span>);<br>    %&gt;<br>    &lt;h2&gt;不同属性范围的值&lt;/h2&gt;<br>    &lt;hr /&gt;<br>    不指定范围：$&#123;info&#125;<br>    &lt;br&gt; page 属性内容：$&#123;pageScope.info&#125;<br>    &lt;br&gt; request 属性内容：$&#123;requestScope.info&#125;<br>    &lt;br&gt;session 属性内容：$&#123;sessionScope.info&#125;<br>    &lt;br&gt;application 属性内容：$&#123;applicationScope.info&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><hr><h2 id="jstl标签很多，笔记一下我常用到的标签"><a href="#jstl标签很多，笔记一下我常用到的标签" class="headerlink" title="jstl标签很多，笔记一下我常用到的标签"></a>jstl标签很多，笔记一下我常用到的标签</h2><p><strong>if</strong></p><p>语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;one.name eq &#x27;nick&#x27;&#125;&quot;</span>&gt;<br>                &lt;tr&gt;<br>                    &lt;td&gt;nick&lt;/td&gt;<br>                &lt;/tr&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br></code></pre></td></tr></table></figure><hr><h1 id="java-sql-SQLException-Value-‘0000-00-00-00-00-00’-can-not-be-represented-as-java-sql-Timestamp"><a href="#java-sql-SQLException-Value-‘0000-00-00-00-00-00’-can-not-be-represented-as-java-sql-Timestamp" class="headerlink" title="java.sql.SQLException: Value ‘0000-00-00 00:00:00’ can not be represented as java.sql.Timestamp"></a>java.sql.SQLException: Value ‘0000-00-00 00:00:00’ can not be represented as java.sql.Timestamp</h1><hr><p>完整的异常信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column <span class="hljs-string">&#x27;audit_time&#x27;</span> from result set.  Cause: org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column <span class="hljs-string">&#x27;audit_time&#x27;</span> from result set.  Cause: java.sql.SQLException: Value <span class="hljs-string">&#x27;0000-00-00 00:00:00&#x27;</span> can not be represented as java.sql.Timestamp<br>    at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:<span class="hljs-number">77</span>)<br>    at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:<span class="hljs-number">446</span>)<br>    at com.sun.proxy.$Proxy127.selectOne(Unknown Source)<br>    at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:<span class="hljs-number">166</span>)<br>    at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:<span class="hljs-number">82</span>)<br>    at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:<span class="hljs-number">59</span>)<br>    at com.sun.proxy.$Proxy134.findOrderInfo(Unknown Source)<br></code></pre></td></tr></table></figure><p>根据异常信息，大概意思是说，’0000-00-00 00:00:00’ 这个时间不能用 Java 来表示。虽然数据库中可以存放这个值，但是 Java 中的时间都是从 1970 年开始的。格林威治时间 1970年01月01日00时00分00秒（UTC+8北京时间1970年01月01日08时00分00秒），所以你这个 ‘0000-00-00 00:00:00’ 的时间，Java 表示不了，所以就抛出了这个异常。</p><hr><p>可以使用下面的方式连接数据库来解决：</p><p>根据 stackoverflow 上一部分人的回答，我得出可以使用下面的方式连接数据库来解决：</p><p><code>jdbc:mysql:``//www.xttblog.com:3306/xttblog?zeroDateTimeBehavior=convertToNull</code></p><hr><h1 id="Matis相关问题"><a href="#Matis相关问题" class="headerlink" title="Matis相关问题"></a>Matis相关问题</h1><h2 id="Mybatis中的resultType和resultMap"><a href="#Mybatis中的resultType和resultMap" class="headerlink" title="Mybatis中的resultType和resultMap"></a>Mybatis中的resultType和resultMap</h2><hr><p>MyBatis中在查询进行select映射的时候，返回类型可以用resultType，也可以用resultMap，resultType是直接表示返回类型的，而resultMap则是对外部ResultMap的引用，但是resultType跟resultMap不能同时存在。</p><hr><h2 id="MyBatis-foreach标签"><a href="#MyBatis-foreach标签" class="headerlink" title="MyBatis foreach标签"></a>MyBatis foreach标签</h2><p>语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mybatis">&lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list|array|map key&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;<br>    参数值<br>&lt;/foreach&gt;<br></code></pre></td></tr></table></figure><p>foreach 标签主要有以下属性，说明如下。</p><ul><li>item：表示集合中每一个元素进行迭代时的别名。</li><li>index：指定一个名字，表示在迭代过程中每次迭代到的位置。</li><li>open：表示该语句以什么开始（既然是 in 条件语句，所以必然以<code>(</code>开始）。</li><li>separator：表示在每次进行迭代之间以什么符号作为分隔符（既然是 in 条件语句，所以必然以<code>,</code>作为分隔符）。</li><li>close：表示该语句以什么结束（既然是 in 条件语句，所以必然以<code>)</code>开始）。</li></ul><p>使用 foreach 标签时，最关键、最容易出错的是 collection 属性，该属性是必选的，但在不同情况下该属性的值是不一样的.</p><p>WebsiteMapper.xml 中代码如下。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> id=&quot;selectWebsite&quot;<br>    parameterType=&quot;net.biancheng.po.Website&quot;<br>    resultType=&quot;net.biancheng.po.Website&quot;&gt;<br>    <span class="hljs-keyword">SELECT</span> id,<span class="hljs-type">name</span>,url,age,country<br>    <span class="hljs-keyword">FROM</span> website <span class="hljs-keyword">WHERE</span> age <span class="hljs-keyword">in</span><br>    &lt;<span class="hljs-keyword">foreach</span> item=&quot;age&quot; <span class="hljs-keyword">index</span>=&quot;index&quot; collection=&quot;list&quot; <span class="hljs-keyword">open</span>=&quot;(&quot;<br>        separator=&quot;,&quot; <span class="hljs-keyword">close</span>=&quot;)&quot;&gt;<br>        #&#123;age&#125;<br>    &lt;/<span class="hljs-keyword">foreach</span>&gt;<br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><p>WebsiteMapper 类中相应方法如下。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">public</span> <span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">Website</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">selectWebsite</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">Integer</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">ageList</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><hr><h2 id="MyBatis分布查询"><a href="#MyBatis分布查询" class="headerlink" title="MyBatis分布查询"></a>MyBatis分布查询</h2><p>association 分步查询</p><ol><li><p>先通过员工的id查询员工信息</p></li><li><p>再通过查询出来的员工信息中的外键(部门id)查询对应的部门信息.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mybatis">&lt;select id=&quot;getEmployeeAndDeptStep&quot; resultMap=&quot;myEmpAndDeptStep&quot;&gt;<br> select id, last_name, email,gender,d_id  from tbl_employee where id =#&#123;id&#125;<br>&lt;/select&gt;<br><br>&lt;resultMap type=&quot;com.atguigu.mybatis.beans.Employee&quot; id=&quot;myEmpAndDeptStep&quot;&gt;<br>&lt;id column=&quot;id&quot;  property=&quot;id&quot; /&gt;<br>&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;<br>&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;<br>&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;<br>&lt;association property=&quot;dept&quot; select=&quot;com.atguigu.mybatis.dao.DepartmentMapper.getDeptById&quot; <br>column=&quot;d_id&quot;&gt;<br>&lt;/association&gt;<br>&lt;/resultMap&gt;<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="mybatis在xml文件中处理大于号小于号的方法"><a href="#mybatis在xml文件中处理大于号小于号的方法" class="headerlink" title="mybatis在xml文件中处理大于号小于号的方法"></a>mybatis在xml文件中处理大于号小于号的方法</h2><p>因为这个是xml格式的，所以不允许出现类似“&gt;”这样的字符，但是都可以使用<!--[CDATA[ ]]-->符号进行说明，将此类符号不进行解析<br>你的可以写成这个： </p><p>mapper文件示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mybatis">&lt;![CDATA[ when min(starttime)&lt;=&#x27;12:00&#x27; and max(endtime)&lt;=&#x27;12:00&#x27; ]]&gt;<br></code></pre></td></tr></table></figure><hr><h2 id="MyBatis一对一关联查询"><a href="#MyBatis一对一关联查询" class="headerlink" title="MyBatis一对一关联查询"></a>MyBatis一对一关联查询</h2><p>在 MyBatis 中，通过 <resultMap> 元素的子元素 <association> 处理一对一级联关系。示例代码如下。</association></resultMap></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mybatis">&lt;association property=&quot;studentCard&quot; column=&quot;cardId&quot;<br>            javaType=&quot;net.biancheng.po.StudentCard&quot;<br>            select=&quot;net.biancheng.mapper.StudentCardMapper.selectStuCardById&quot; /&gt;<br></code></pre></td></tr></table></figure><p>在 <association> 元素中通常使用以下属性。</association></p><ul><li>property：指定映射到实体类的对象属性。</li><li>column：指定表中对应的字段（即查询返回的列名）。</li><li>javaType：指定映射到实体对象属性的类型。</li><li>select：指定引入嵌套查询的子 SQL 语句，该属性用于关联映射中的嵌套查询。</li></ul><hr><h1 id="JS相关问题"><a href="#JS相关问题" class="headerlink" title="JS相关问题"></a>JS相关问题</h1><h2 id="JS-ajax提交form表单"><a href="#JS-ajax提交form表单" class="headerlink" title="JS ajax提交form表单"></a>JS ajax提交form表单</h2><h3 id="通用处理"><a href="#通用处理" class="headerlink" title="通用处理"></a>通用处理</h3><p>在使用 Ajax 提交 form 表单时，需要对 form 表单进行特殊的处理，包括以下几点：</p><ul><li>将 form 标签的 action 属性和 method 属性去掉。</li><li>将提交 form 表单按钮的 type=”submit” 改为 type=”button”。</li></ul><h3 id="使用原生-Ajax-提交-form-表单包含以下过程："><a href="#使用原生-Ajax-提交-form-表单包含以下过程：" class="headerlink" title="使用原生 Ajax 提交 form 表单包含以下过程："></a>使用原生 Ajax 提交 form 表单包含以下过程：</h3><ul><li><p>绑定提交按钮事件。</p><p>在单击提交按钮时，触发 Ajax 请求的操作，将整个 Ajax 操作封装在 ajaxSubmitForm() 函数里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> submitBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;submit&#x27;</span>);<br>submitBtn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    ajaxSubmitForm();<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>创建 XMLHttpRequest 对象。</p><p>XMLHttpRequest 对象的创建直接使用封装的函数即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createXMLHttp</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span><br>    <span class="hljs-keyword">var</span> xmlhttp;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>        xmlhttp = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125;<br>    <span class="hljs-comment">// code for IE6, IE5</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.ActiveXObject) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            xmlhttp = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                xmlhttp = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;msxml2.XMLHTTP&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (ex) &#123; &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> xmlhttp;<br>&#125;<br><span class="hljs-keyword">var</span> xhr = createXMLHttp()<br></code></pre></td></tr></table></figure></li><li><p>建立连接。</p><p>本实例可以理解为一个用户的注册操作，发送的请求为 POST 请求，使用异步处理的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.open(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;/saveUser&#x27;</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure></li><li><p>设置请求头。</p><p>由于本实例中发送的是 POST 请求，需要设置数据传输格式，即设置 Content-type 属性值。可以通过 setRequestHeader() 函数对其进行设置，将其值设置为比较普遍的 JSON 数据格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;application/json;charset=UTF-8&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>获取数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> username = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;username&#x27;</span>).value;<br><span class="hljs-keyword">var</span> password = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;password&#x27;</span>).value;<br><span class="hljs-keyword">var</span> telphone = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;telphone&#x27;</span>).value;<br><span class="hljs-keyword">var</span> email = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;email&#x27;</span>).value;<br><span class="hljs-keyword">var</span> content = &#123;<br>    <span class="hljs-attr">username</span>: username,<br>    <span class="hljs-attr">password</span>: password,<br>    <span class="hljs-attr">telphone</span>: telphone,<br>    <span class="hljs-attr">email</span>: email<br>&#125;;<br></code></pre></td></tr></table></figure><p>因为在请求头中设置了数据传输格式为 json，所以需要将 content 对象处理为 json 字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">content = <span class="hljs-built_in">JSON</span>.stringify(content);<br></code></pre></td></tr></table></figure></li><li><p>发送请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.send(content);<br></code></pre></td></tr></table></figure></li><li><p>处理响应。</p><p>设置 onreadystatechange 属性对应的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 当readyStatew为4，且状态码为200时代表请求成功</span><br>    <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span> &amp;&amp; xhr.status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-comment">// 处理响应值</span><br>        <span class="hljs-built_in">document</span>.write(xhr.responseText);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="使用js操作checkbox"><a href="#使用js操作checkbox" class="headerlink" title="使用js操作checkbox"></a>使用js操作checkbox</h2><h3 id="使用原生JavaScript判断是否选中checkbox框"><a href="#使用原生JavaScript判断是否选中checkbox框" class="headerlink" title="使用原生JavaScript判断是否选中checkbox框"></a>使用原生JavaScript判断是否选中checkbox框</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;test&quot;</span>&gt;同意<br>&lt;script&gt;<br>    <span class="hljs-comment">// 获取checkbox元素</span><br>    <span class="hljs-keyword">var</span> box=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>);      <br>    <span class="hljs-comment">// 判断是否被拒选中，选中返回true，未选中返回false</span><br>    alert(box.checked);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h2 id="javascript怎么实现页面跳转"><a href="#javascript怎么实现页面跳转" class="headerlink" title="javascript怎么实现页面跳转"></a>javascript怎么实现页面跳转</h2><ol><li><p>使用“location.href=”URL””；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> </span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>location.href<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>方式的示例<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunc()&quot;</span>&gt;</span>点击这里<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-comment">&lt;!--重定向到其他网页的脚本--&gt;</span>   </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"> </span></span><br><span class="javascript"><span class="xml">         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params"></span>) </span>&#123; </span></span><br><span class="javascript"><span class="xml">           <span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">&quot;https://www.php.cn&quot;</span>; </span></span><br><span class="javascript"><span class="xml">         &#125; </span></span><br><span class="javascript"><span class="xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </span><br><span class="xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>使用“location.replace(“URL”)”；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> </span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>location.replace()<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>方式的示例<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunc()&quot;</span>&gt;</span>点击这里<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-comment">&lt;!--重定向到其他网页的脚本--&gt;</span>   </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"> </span></span><br><span class="javascript"><span class="xml">         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params"></span>) </span>&#123; </span></span><br><span class="javascript"><span class="xml">          location.replace(<span class="hljs-string">&quot;https://www.php.cn&quot;</span>); </span></span><br><span class="javascript"><span class="xml">         &#125; </span></span><br><span class="javascript"><span class="xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </span><br><span class="xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>使用“location.assign(“URL”)”;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> </span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>location.assign()<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>方式的示例<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunc()&quot;</span>&gt;</span>点击这里<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-comment">&lt;!--重定向到其他网页的脚本--&gt;</span>   </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"> </span></span><br><span class="javascript"><span class="xml">         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params"></span>) </span>&#123; </span></span><br><span class="javascript"><span class="xml">          location.assign(<span class="hljs-string">&quot;https://www.php.cn&quot;</span>); </span></span><br><span class="javascript"><span class="xml">         &#125; </span></span><br><span class="javascript"><span class="xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </span><br><span class="xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>使用“window.open(“URL”)”;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> </span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>window.open()<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>方式的示例<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunc()&quot;</span>&gt;</span>点击这里<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> </span><br><span class="xml">      <span class="hljs-comment">&lt;!--重定向到其他网页的脚本--&gt;</span>   </span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"> </span></span><br><span class="javascript"><span class="xml">         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunc</span>(<span class="hljs-params"></span>) </span>&#123; </span></span><br><span class="javascript"><span class="xml">          <span class="hljs-built_in">window</span>.open(<span class="hljs-string">&quot;https://www.php.cn&quot;</span>); </span></span><br><span class="javascript"><span class="xml">         &#125; </span></span><br><span class="javascript"><span class="xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </span><br><span class="xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="js中相对路径写法"><a href="#js中相对路径写法" class="headerlink" title="js中相对路径写法"></a>js中相对路径写法</h2><ol><li>“../“ 表示上一级目录开始；</li><li>“./“ 表示同级目录开始</li><li>“/“ 表示根目录开始</li></ol><hr><h2 id="JS中对象与数组-大括号-与中括号"><a href="#JS中对象与数组-大括号-与中括号" class="headerlink" title="JS中对象与数组(大括号{}与中括号[])"></a>JS中对象与数组(大括号{}与中括号[])</h2><ol><li><p>{ } 大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数.</p></li><li><p>[ ]中括号，表示一个数组，也可以理解为一个数组对象。</p></li><li><p>{ } 和[ ] 一起使用，我们前面说到，{ } 是一个对象，[ ] 是一个数组，我们可以组成一个对象数组</p><p><strong>对象的属性名可以为数字，但是不能正常读取，可以以数组下标形式读取。</strong></p></li></ol><hr><h2 id="JS创建对象（3种方式）"><a href="#JS创建对象（3种方式）" class="headerlink" title="JS创建对象（3种方式）"></a>JS创建对象（3种方式）</h2><ol><li><p>构造对象</p><p>使用 new 运算符调用构造函数，可以构造一个实例对象。具体用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> objectName = <span class="hljs-keyword">new</span> functionName(args);<br></code></pre></td></tr></table></figure></li><li><p>对象直接量</p><p>使用直接量可以快速创建对象，也是最高效、最简便的方法。具体用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> objectName = &#123;<br>    属性名<span class="hljs-number">1</span> : 属性值<span class="hljs-number">1</span>,<br>    属性名<span class="hljs-number">2</span> : 属性值<span class="hljs-number">2</span>,<br>    ...<br>    属性名n : 属性值n<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>示例1</em></p><p>下面代码使用对象直接量定义两个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o = &#123;  <span class="hljs-comment">//对象直接量</span><br>    <span class="hljs-attr">a</span> : <span class="hljs-number">1</span>,  <span class="hljs-comment">//定义属性</span><br>    <span class="hljs-attr">b</span> : <span class="hljs-literal">true</span>  <span class="hljs-comment">//定义属性</span><br>&#125;<br><span class="hljs-keyword">var</span> o1 = &#123;  <span class="hljs-comment">//对象直接量</span><br>    <span class="hljs-string">&quot;a&quot;</span> : <span class="hljs-number">1</span>,  <span class="hljs-comment">//定义属性</span><br>    <span class="hljs-string">&quot;b&quot;</span> : <span class="hljs-literal">true</span>  <span class="hljs-comment">//定义属性</span><br>&#125;<br></code></pre></td></tr></table></figure><p><em>示例2</em></p><p>如果不包含任何属性，则可以定义一个空对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o = &#123;&#125;  <span class="hljs-comment">//定义一个空对象直接量</span><br></code></pre></td></tr></table></figure></li><li><p>使用 Object.create</p><p>Object.create 是 ECMAScript 5 新增的一个静态方法，用来创建一个实例对象。该方法可以指定对象的原型和对象特性。具体用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.create(prototype, descriptors)<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="数组对象中每个对象添加一个字段"><a href="#数组对象中每个对象添加一个字段" class="headerlink" title="数组对象中每个对象添加一个字段"></a>数组对象中每个对象添加一个字段</h2><p>使用Array forEach()方法</p><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。</p><ol><li><p><strong>currentValue</strong> 必须。当前元素的值</p></li><li><p><strong>index</strong> 可选。当前元素的索引值</p></li><li><p><strong>index</strong> 可选。当前元素属于的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<br>    &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lilei&#x27;</span>,<span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;25&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;nike&#x27;</span>,<span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;23&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;alisa&#x27;</span>,<span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;23&#x27;</span>&#125;<br>]<br>arr.forEach(<span class="hljs-function">(<span class="hljs-params">value , index</span>) =&gt;</span> &#123;<br>value[<span class="hljs-string">&#x27;sex&#x27;</span>] = <span class="hljs-string">&#x27;men&#x27;</span><br>&#125;)<br><span class="hljs-comment">//  返回原数组arr</span><br>[<br>   &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lilei&#x27;</span>,<span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;25&#x27;</span>,<span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;men&#x27;</span>&#125;,<br>   &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;nike&#x27;</span>,<span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;23&#x27;</span>,<span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;men&#x27;</span>&#125;,<br>   &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;alisa&#x27;</span>,<span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;23&#x27;</span>,<span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;men&#x27;</span>&#125;<br>]<br></code></pre></td></tr></table></figure></li></ol><hr><ol><li></li></ol><h2 id="JS遍历数组（for-in和forEach循环）"><a href="#JS遍历数组（for-in和forEach循环）" class="headerlink" title="JS遍历数组（for in和forEach循环）"></a>JS遍历数组（for in和forEach循环）</h2><ol><li><p>使用 for 和 for in遍历数组</p><p>下面示例使用 for 语句迭代数组，过滤出所有数字元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ,,,,,,<span class="hljs-literal">true</span>,,,,,,, <span class="hljs-string">&quot;a&quot;</span>,,,,,,,,,,,,,,,<span class="hljs-number">4</span>,,,,,<span class="hljs-number">56</span>,,,,,,<span class="hljs-string">&quot;b&quot;</span>];  <span class="hljs-comment">//定义数组</span><br><span class="hljs-keyword">var</span> b = [], num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i ++) &#123;  <span class="hljs-comment">//遍历数组</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a[i] == <span class="hljs-string">&quot;number&quot;</span>)  <span class="hljs-comment">//如果为数字，则返回该元素的值</span><br>        b.push(a[i]);<br>    num ++;  <span class="hljs-comment">//计数器</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(num);  <span class="hljs-comment">//返回42，说明循环了42次</span><br><span class="hljs-built_in">console</span>.log(b);  <span class="hljs-comment">//返回[1,2,4,56]</span><br></code></pre></td></tr></table></figure><p>下面代码使用 for/in 语句迭代示例 1 中的数组 a。在 for/in 循环结构中，变量 i 表示数组的下标，而 a[i] 为可以读取指定下标的元素值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> b = [], num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> a) &#123;  <span class="hljs-comment">//遍历数组</span><br>    <span class="hljs-keyword">if</span>（<span class="hljs-keyword">typeof</span> a[i] == <span class="hljs-string">&quot;number&quot;</span>)  <span class="hljs-comment">//如果为数字，则返回该元素的值</span><br>        b.push(a[i]);<br>    num ++;  <span class="hljs-comment">//计数器</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(num);   <span class="hljs-comment">//返回7，说明循环了7次</span><br><span class="hljs-built_in">console</span>.log(b);  <span class="hljs-comment">//返回[1,2,4,56]</span><br></code></pre></td></tr></table></figure></li><li><p>使用 forEach 遍历数组</p><p>Array 类型为每个数组定义了 forEach() 原型方法，使用该方法可以为数组执行迭代操作。具体说明如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.forEach(callbackfn[, thisArg]);<br></code></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>array：一个数组对象。</li><li>callbackfn：必需参数，最多可以接收三个参数的函数。forEach 将为数组中的每个元素调用 callbackfn 函数一次。</li><li>thisArg：可选参数，callbackfn 函数中的 this 可引用的对象。如果省略 thisArg，则 this 的值为 undefined。</li></ul><p>回调函数语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">funtion callbackfn(value, index, array);<br></code></pre></td></tr></table></figure><p>最多可以使用三个参数来声明回调函数。回调函数的参数说明如下。</p><ul><li>value：数组元素的值。</li><li>index：数组元素的数字索引。</li><li>array：包含该元素的数组对象。</li></ul><p>下面示例使用 forEach 迭代数组 a，然后把每个元素的值和下标索引输出显示，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">value,index,array</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a[&quot;</span> + index + <span class="hljs-string">&quot;] = &quot;</span> + value);<br>&#125;<br><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br>a.forEach(f);<br></code></pre></td></tr></table></figure><img src="http://c.biancheng.net/uploads/allimg/190906/6-1ZZ6130204N8.gif" style="zoom: 80%;"></li></ol><hr><h2 id="js-清空array数组"><a href="#js-清空array数组" class="headerlink" title="js-清空array数组"></a>js-清空array数组</h2><ol><li><p>splice</p><p>删除元素并添加新元素，直接对数组进行修改，返回含有被删除元素的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arrayObject.splice(index,howmany,element1,.....,elementX)<br></code></pre></td></tr></table></figure><p>index：必选，规定从何处添加/删除元素。</p><p>howmany：必选，规定应该删除多少元素。未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</p><p>element1:可选，规定要添加到数组的新元素。</p><p>Js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type =<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>    arr.splice(<span class="hljs-number">0</span>,arr.length);<br>    <span class="hljs-built_in">document</span>.write(arr);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>赋值为[]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ary = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>ary = []; <span class="hljs-comment">// 赋值为一个空数组以达到清空原数组</span><br></code></pre></td></tr></table></figure></li></ol><hr><h1 id="Layui相关问题"><a href="#Layui相关问题" class="headerlink" title="Layui相关问题"></a>Layui相关问题</h1><h2 id="Layui中弹出层关闭后但是弹出层中的内容依然显示在页面上，没有消失"><a href="#Layui中弹出层关闭后但是弹出层中的内容依然显示在页面上，没有消失" class="headerlink" title="Layui中弹出层关闭后但是弹出层中的内容依然显示在页面上，没有消失"></a>Layui中弹出层关闭后但是弹出层中的内容依然显示在页面上，没有消失</h2><p>原因：jquery 冲突<br>解决方法：将你html页面引入的jquery删掉，直接使用layui内置的jquery</p><ol><li><p>删除页面引入的jquery</p><p><img src="https://img-blog.csdnimg.cn/20190702182323215.png"></p></li><li><p>使用layui自带的jquery</p><p><img src="https://img-blog.csdnimg.cn/20190702182505828.png"></p></li></ol><hr><h2 id="Layui-form-表单验证lay-verify的使用"><a href="#Layui-form-表单验证lay-verify的使用" class="headerlink" title="Layui form 表单验证lay-verify的使用"></a>Layui form 表单验证lay-verify的使用</h2><p>lay-verify：表单验证的关键字有以下值供选择：</p><ol><li>required (必填项)</li><li>phone（手机号） </li><li>email（邮箱） </li><li>url（网址） </li><li>number（数字） </li><li>date（日期） </li><li>identify(身份证)</li></ol><p><strong>layui支持多条规则的验证：格式：lay-verify=”验证1|验证2”    如：lay-verify=”required|phone|number”</strong></p><p>自定义验证 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">密码：&lt;input id=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;lauui-input&quot;</span>&gt;&lt;/input&gt;<br>确认密码：&lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;lauui-input&quot;</span> lay-verify=<span class="hljs-string">&quot;required|pwd&quot;</span>&gt;&lt;/input&gt;<br><br><br><br> <span class="hljs-comment">//form自定义验证</span><br> <br>form.verify(&#123;<br><span class="hljs-comment">//密码的验证</span><br>    <span class="hljs-attr">pwd</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>        <span class="hljs-keyword">debugger</span><br>        <span class="hljs-keyword">var</span> pwd = $(<span class="hljs-string">&#x27;#password&#x27;</span>).val();<br>        <span class="hljs-keyword">if</span>(pwd !=value)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;两次输入密码不一致&quot;</span>;<br>        &#125;<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><hr><h2 id="layui-Form禁止编辑"><a href="#layui-Form禁止编辑" class="headerlink" title="layui Form禁止编辑"></a>layui Form禁止编辑</h2><ol><li><p>设置样式,鼠标点击输入框出现禁用图标（不可编辑，不可复制，不可选择，不能接收焦点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;layui-disabled&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>通过设置disabled属性实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;layui-input&quot;</span> disabled&gt;<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="使用layui框架时select监听的那些坑：无法监听change事件"><a href="#使用layui框架时select监听的那些坑：无法监听change事件" class="headerlink" title="使用layui框架时select监听的那些坑：无法监听change事件"></a>使用layui框架时select监听的那些坑：无法监听change事件</h2><p>layui框架对select表单代码又进行了二次渲柒，所以无法使用普通的监听。</p><p>那要怎么监听呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>&lt;select lay-filter=<span class="hljs-string">&quot;demo&quot;</span>&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br>&lt;/select&gt;<br> <br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">layui.use([<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-string">&#x27;jquery&#x27;</span>, <span class="hljs-string">&#x27;form&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">var</span> layer = layui.layer,</span></span><br><span class="javascript"><span class="xml">$ = layui.jquery,</span></span><br><span class="javascript"><span class="xml">form = layui.form;</span></span><br><span class="javascript"><span class="xml"> </span></span><br><span class="javascript"><span class="xml">form.on(<span class="hljs-string">&#x27;select(demo)&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//这里做自己想做的事情</span></span></span><br><span class="javascript"><span class="xml">                <span class="hljs-built_in">console</span>.log(data.elem); <span class="hljs-comment">//得到select原始DOM对象</span></span></span><br><span class="javascript"><span class="xml">                <span class="hljs-built_in">console</span>.log(data.value); <span class="hljs-comment">//得到被选中的值</span></span></span><br><span class="javascript"><span class="xml">                <span class="hljs-built_in">console</span>.log(data.othis); <span class="hljs-comment">//得到美化后的DOM对象</span></span></span><br><span class="javascript"><span class="xml">                <span class="hljs-comment">//最后再渲柒一次</span></span></span><br><span class="javascript"><span class="xml">                form.render(<span class="hljs-string">&#x27;select&#x27;</span>);<span class="hljs-comment">//select是固定写法 不是选择器</span></span></span><br><span class="javascript"><span class="xml">&#125;);</span></span><br><span class="javascript"><span class="xml">&#125;);</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="Layui按钮动态设置禁用与取消禁用"><a href="#Layui按钮动态设置禁用与取消禁用" class="headerlink" title="Layui按钮动态设置禁用与取消禁用"></a>Layui按钮动态设置禁用与取消禁用</h2><p>按钮：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> lay-filter=<span class="hljs-string">&quot;formDemo&quot;</span> type=<span class="hljs-string">&quot;submit&quot;</span> id=<span class="hljs-string">&quot;formDemo&quot;</span> lay-submit=<span class="hljs-string">&quot;&quot;</span>&gt;保存&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>禁用按钮：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#formDemo&#x27;</span>).attr(<span class="hljs-string">&quot;disabled&quot;</span>,<span class="hljs-literal">true</span>).addClass(<span class="hljs-string">&quot;layui-btn-disabled&quot;</span>);<br></code></pre></td></tr></table></figure><p>取消禁用按钮：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#formDemo&#x27;</span>).attr(<span class="hljs-string">&quot;disabled&quot;</span>,<span class="hljs-literal">false</span>).removeClass(<span class="hljs-string">&quot;layui-btn-disabled&quot;</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="layui如何自定义弹出层关闭事件"><a href="#layui如何自定义弹出层关闭事件" class="headerlink" title="layui如何自定义弹出层关闭事件"></a>layui如何自定义弹出层关闭事件</h2><p>代码示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>        <span class="hljs-keyword">var</span> layer = layui.layer;<br><br>        layer.open(&#123;<br>            <span class="hljs-attr">skin</span>: <span class="hljs-string">&#x27;demo-class&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;登录&#x27;</span>,<br>            <span class="hljs-attr">area</span>: [<span class="hljs-string">&#x27;600px&#x27;</span>, <span class="hljs-string">&#x27;700px&#x27;</span>],<br>            <span class="hljs-attr">closeBtn</span> :<span class="hljs-number">0</span>,<br>            <span class="hljs-attr">content</span>: $(<span class="hljs-string">&#x27;.login&#x27;</span>), <span class="hljs-comment">//这里content是一个普通的String</span><br>            <span class="hljs-attr">cancel</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                vscode.postMessage(&#123;<br>                    <span class="hljs-attr">command</span>: <span class="hljs-string">&#x27;close&#x27;</span><br>                &#125;);<br>            &#125;<br>        &#125;);<br>    &#125;);<br></code></pre></td></tr></table></figure><hr><h1 id="HTTP相关问题"><a href="#HTTP相关问题" class="headerlink" title="HTTP相关问题"></a>HTTP相关问题</h1><h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><p>下面是常见的 HTTP 状态码：</p><ol><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ol><hr><h1 id="Eclipse使用相关问题"><a href="#Eclipse使用相关问题" class="headerlink" title="Eclipse使用相关问题"></a>Eclipse使用相关问题</h1><h2 id="Eclipse添加GBK编码"><a href="#Eclipse添加GBK编码" class="headerlink" title="Eclipse添加GBK编码"></a>Eclipse添加GBK编码</h2><p>首先Windows-&gt;Preferences, 然后选择General下面的Workspace. Text file encoding选择Other GBK， 如果没有GBK的选项， 没关系， 直接输入GBK三个字母， Apply， GBK编码的中文， 已经不是乱码了</p><hr><h1 id="JAVAWEB相关问题"><a href="#JAVAWEB相关问题" class="headerlink" title="JAVAWEB相关问题"></a>JAVAWEB相关问题</h1><h2 id="JavaWeb——转发和重定向"><a href="#JavaWeb——转发和重定向" class="headerlink" title="JavaWeb——转发和重定向"></a>JavaWeb——转发和重定向</h2><ol><li><p>转发和重定向的比较：</p><table><thead><tr><th>比较内容</th><th>转发</th><th>重定向</th></tr></thead><tbody><tr><td>浏览器发送请求的次数</td><td>1</td><td>2</td></tr><tr><td>发生的位置</td><td>服务器</td><td>浏览器</td></tr><tr><td>地址栏变化</td><td>不发生变化</td><td>发生改变</td></tr><tr><td>浏览器感知</td><td>无感知</td><td>有感知</td></tr></tbody></table></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//转发</span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;login-success.html&quot;</span>).forward(request,response);<br><span class="hljs-comment">//重定向</span><br>response.sendRedirect(<span class="hljs-string">&quot;login-error.html&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="用Java来获取访问者真实的IP地址"><a href="#用Java来获取访问者真实的IP地址" class="headerlink" title="用Java来获取访问者真实的IP地址"></a>用Java来获取访问者真实的IP地址</h2><p>在JSP里，获取客户端的IP地址的方法是：request.getRemoteAddr()</p><hr><h1 id="SpringAOP相关问题"><a href="#SpringAOP相关问题" class="headerlink" title="SpringAOP相关问题"></a>SpringAOP相关问题</h1><h2 id="Spring-AOP中获取session方法"><a href="#Spring-AOP中获取session方法" class="headerlink" title="Spring AOP中获取session方法"></a>Spring AOP中获取session方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">ServletRequestAttributes attr = (ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();<br>HttpSession session=attr.getRequest().getSession(<span class="hljs-literal">true</span>);<br>UserModel user = (UserModel)session.getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>);<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crm</tag>
      
      <tag>crm项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lanTingXu</title>
    <link href="/2021/10/10/lanTingXu/"/>
    <url>/2021/10/10/lanTingXu/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/10/10/lanTingXu/lanTingXu%5Cimage-20211010100401310.png"></p><p><img src="/2021/10/10/lanTingXu/lanTingXu%5Cth.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>想写一手好字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/25/hello-world/"/>
    <url>/2021/09/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
