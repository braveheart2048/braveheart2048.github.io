<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringAOP学习整理</title>
    <link href="/2022/05/14/SpringAOP%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <url>/2022/05/14/SpringAOP%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"># 对AOP的初印象<p><img src="https://img-blog.csdn.net/20180530172528617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E5ODIxNTE3NTY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><h1 id="AOP中的相关概念"><a href="#AOP中的相关概念" class="headerlink" title="AOP中的相关概念"></a>AOP中的相关概念</h1><ul><li><p>Aspect（切面）： Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</p></li><li><p>Joint point（连接点）：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</p></li><li><p>Pointcut（切点）：表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</p></li><li><p>Advice（增强）：Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。</p></li><li><p>Target（目标对象）：织入 Advice 的目标对象.。</p></li><li><p>Weaving（织入）：将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程</p><img src="https://img-blog.csdn.net/20180530175605692?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3E5ODIxNTE3NTY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="zoom: 67%;"></li></ul><h1 id="Advice-的类型"><a href="#Advice-的类型" class="headerlink" title="Advice 的类型"></a>Advice 的类型</h1><ul><li>before advice, 在 join point 前被执行的 advice. 虽然 before advice 是在 join point 前被执行, 但是它并不能够阻止 join point 的执行, 除非发生了异常(即我们在 before advice 代码中, 不能人为地决定是否继续执行 join point 中的代码)</li><li>after return advice, 在一个 join point 正常返回后执行的 advice</li><li>after throwing advice, 当一个 join point 抛出异常后执行的 advice</li><li>after(final) advice, 无论一个 join point 是正常退出还是发生了异常, 都会被执行的 advice.</li><li>around advice, 在 join point 前和 joint point 退出后都执行的 advice. 这个是最常用的 advice.</li><li>introduction，introduction可以为原有的对象增加新的属性和方法。</li></ul><h1 id="在Java平台上，对于AOP的织入，有3种方式："><a href="#在Java平台上，对于AOP的织入，有3种方式：" class="headerlink" title="在Java平台上，对于AOP的织入，有3种方式："></a>在Java平台上，对于AOP的织入，有3种方式：</h1><ol><li>编译期：在编译时，由编译器把切面调用编译进字节码，这种方式需要定义新的关键字并扩展编译器，AspectJ就扩展了Java编译器，使用关键字aspect来实现织入；</li><li>类加载器：在目标类被装载到JVM时，通过一个特殊的类加载器，对目标类的字节码重新“增强”；</li><li>运行期：目标对象和切面都是普通Java类，通过JVM的动态代理功能或者第三方库实现运行期动态织入。</li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven介绍</title>
    <link href="/2022/05/14/Maven%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/05/14/Maven%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h1><p>Maven是一个Java项目管理和构建工具，它可以定义项目结构、项目依赖，并使用统一的方式进行自动化构建，是Java项目不可缺少的工具。</p><hr><h2 id="Maven介绍"><a href="#Maven介绍" class="headerlink" title="Maven介绍"></a>Maven介绍</h2><ol><li><p>一个使用Maven管理的普通的Java项目，它的目录结构默认如下：</p><p><img src="/.com//Blog\source_posts\MavenDescription\image-20220419165550723.png"></p></li></ol><p>存放Java源码的目录是<code>src/main/java</code>，存放资源文件的目录是<code>src/main/resources</code>，存放测试源码的目录是<code>src/test/java</code>，存放测试资源的目录是<code>src/test/resources</code>，最后，所有编译、打包生成的文件都放在<code>target</code>目录里。</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ol><li><p>Maven解决了依赖管理问题。例如，我们的项目依赖<code>abc</code>这个jar包，而<code>abc</code>又依赖<code>xyz</code>这个jar包：</p><p><img src="/.com//Blog\source_posts\MavenDescription\image-20220419170045724.png"></p><p>​    当我们声明了<code>abc</code>的依赖时，Maven自动把<code>abc</code>和<code>xyz</code>都加入了我们的项目依赖，不需要我们自己去研究<code>abc</code>是否需要依赖<code>xyz</code>。</p></li><li><p>依赖关系</p><p>Maven定义了几种依赖关系，分别是<code>compile</code>、<code>test</code>、<code>runtime</code>和<code>provided</code>：</p><table><thead><tr><th align="left">scope</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">编译时需要用到该jar包（默认）</td><td align="left">commons-logging</td></tr><tr><td align="left">test</td><td align="left">编译Test时需要用到该jar包</td><td align="left">junit</td></tr><tr><td align="left">runtime</td><td align="left">编译时不需要，但运行时需要用到</td><td align="left">mysql</td></tr><tr><td align="left">provided</td><td align="left">编译时需要用到，但运行时由JDK或某个服务器提供</td><td align="left">servlet-api</td></tr></tbody></table></li><li><p>唯一ID</p><p>对于某个依赖，Maven只需要3个变量即可唯一确定某个jar包：</p><ul><li>groupId：属于组织的名称，类似Java的包名；</li><li>artifactId：该jar包自身的名称，类似Java的类名；</li><li>version：该jar包的版本。</li></ul></li><li><p>Maven镜像</p><p>中国区用户可以使用阿里云提供的Maven镜像仓库。使用Maven镜像仓库需要一个配置，在用户主目录下进入<code>.m2</code>目录，创建一个<code>settings.xml</code>配置文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 国内推荐阿里云的Maven镜像 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>搜索第三方组件</p><p>最后一个问题：如果我们要引用一个第三方组件，比如<code>okhttp</code>，如何确切地获得它的<code>groupId</code>、<code>artifactId</code>和<code>version</code>？方法是通过<a href="https://search.maven.org/">search.maven.org</a>搜索关键字，找到对应的组件后，直接复制</p></li></ol><p><strong>小结</strong></p><p>Maven通过解析依赖关系确定项目所需的jar包，常用的4种<code>scope</code>有：<code>compile</code>（默认），<code>test</code>，<code>runtime</code>和<code>provided</code>；</p><p>Maven从中央仓库下载所需的jar包并缓存在本地；</p><p>可以通过镜像仓库加速下载。</p>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速学习时序图：时序图简介、画法及实例</title>
    <link href="/2022/05/14/UML%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/"/>
    <url>/2022/05/14/UML%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="快速学习时序图：时序图简介、画法及实例"><a href="#快速学习时序图：时序图简介、画法及实例" class="headerlink" title="快速学习时序图：时序图简介、画法及实例"></a><strong>快速学习时序图：时序图简介、画法及实例</strong></h1><h2 id="组成元素有哪些？"><a href="#组成元素有哪些？" class="headerlink" title="组成元素有哪些？"></a><strong>组成元素有哪些？</strong></h2><ol><li><p>角色（Actor）</p></li><li><p>对象（Object）</p></li><li><p>生命线（Lifeline）</p></li><li><p>控制焦点（Focus of Control）</p></li><li><p>消息（Message）</p></li><li><p>自关联消息</p></li><li><p>组合片段</p><p>组合片段用来解决交互执行的条件和方式，它允许在序列图中直接表示逻辑组件，用于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。组合片段共有13种，名称及含义如下：</p><p><img src="http://www.uml.org.cn/oobject/images/2019092021.png"></p><p>常用组合片段举例：</p><ol><li><p>抉择（Alt）</p><p>抉择在任何场合下只发生一个序列。</p><p><img src="http://www.uml.org.cn/oobject/images/2019092022.png"></p></li><li><p>选项（Opt）</p><p>包含一个可能发生或不发生的序列；</p><p><img src="http://www.uml.org.cn/oobject/images/2019092023.png"></p></li><li><p>循环（Loop）</p><p>片段重复一定次数，可以在临界中指示片段重复的条件。</p><p><img src="http://www.uml.org.cn/oobject/images/2019092024.png"></p></li><li><p>并行（Par）</p><p><img src="http://www.uml.org.cn/oobject/images/2019092025.png"></p></li></ol></li></ol><h2 id="时序图的画法及实例"><a href="#时序图的画法及实例" class="headerlink" title="时序图的画法及实例"></a><strong>时序图的画法及实例</strong></h2><ol><li><p>划清边界，识别交互的语境</p><p>所谓划清边界，就是要界定好自己所要画的时序图的范围，“学生在教务系统中查询其课程的成绩”就是所要绘制的时序图的交互内容，不用往上延伸到用户登录，也不要往下延伸到下载成绩单。</p><p>识别交互的语境，即是读懂所要画的时序图的前提和背景。比如本例中，既然学生可以查询成绩，那么该学生肯定已经注册并认证过其身份，并可选择其所考试的课程查询相应成绩。</p></li><li><p>梳理角色和对象</p><p>在本例中，角色有学生，对象有教务系统、课程、成绩。</p><p>对象的梳理是一个相对主观的过程，比如本例中，课程以及成绩分别作为了对象存在，也可以合并为数据库这一个对象。</p><p>请注意：角色以及对象，都为名词，动词不可作为角色和对象，如“成绩查询”不可作为对象。</p><img src="http://www.uml.org.cn/oobject/images/2019092026.png" style="zoom:50%;"></li><li><p>添加消息</p><p>学生的登录验证作为本时序图的前置行为，可直接引用到本时序图中，也可忽略不画；学生进入成绩查询页面后，页面会加载本学生的成绩查询课程列表，并显示出课程对应的成绩；</p><img src="http://www.uml.org.cn/oobject/images/2019092027.png" style="zoom:50%;"></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何方便的在任意目录下运行Windows命令行</title>
    <link href="/2022/05/14/Windows%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/14/Windows%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="如何方便的在任意目录下运行Windows命令行"><a href="#如何方便的在任意目录下运行Windows命令行" class="headerlink" title="如何方便的在任意目录下运行Windows命令行"></a>如何方便的在任意目录下运行Windows命令行</h1><p>打开想去的目录，空白处，按住shift+鼠标右键，就可以选择在此处打开命令行了。</p>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用例图怎么画？附4大关系详解</title>
    <link href="/2022/05/14/%E7%94%A8%E4%BE%8B%E5%9B%BE%E6%80%8E%E4%B9%88%E7%94%BB%EF%BC%9F%E9%99%844%E5%A4%A7%E5%85%B3%E7%B3%BB%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/05/14/%E7%94%A8%E4%BE%8B%E5%9B%BE%E6%80%8E%E4%B9%88%E7%94%BB%EF%BC%9F%E9%99%844%E5%A4%A7%E5%85%B3%E7%B3%BB%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="用例图的定义及组成要素"><a href="#用例图的定义及组成要素" class="headerlink" title="用例图的定义及组成要素"></a>用例图的定义及组成要素</h1><p>它主要由三部分组成：<strong>参与者</strong>、<strong>用例</strong>、<strong>参与者与用例之间的关系。</strong></p><p><strong>参与者：</strong>不是特指人，是指系统以外的，在使用系统或与系统交互中所扮演的角色。</p><p><strong>用例：</strong>是对包括变量在内的一组动作序列的描述，系统执行这些动作，并产生传递特定参与者的价值的可观察结果。</p><p><strong>关系：</strong>参与者与用例之间的关系主要包括关联、归纳（泛化）、包含、拓展和依赖。</p><h1 id="参与者与用例的4种关系"><a href="#参与者与用例的4种关系" class="headerlink" title="参与者与用例的4种关系"></a>参与者与用例的4种关系</h1><ol><li><h2 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a><strong>关联关系</strong></h2><p><strong>举例说明：</strong>用户登录系统</p><p><img src="https://pic3.zhimg.com/80/v2-830ec9e117f74c4d1a9dc1776bead9b2_720w.jpg"></p></li><li><h2 id="归纳（泛化）关系"><a href="#归纳（泛化）关系" class="headerlink" title="归纳（泛化）关系"></a><strong>归纳（泛化）关系</strong></h2><p><strong>举例说明：</strong>VIP会员和普通用户，归纳为用户；账号登录与微信登录，也可归纳为登录系统。</p><p><img src="https://pic4.zhimg.com/80/v2-27fcca6ef7b16bdcf2cdf676d9adf7a3_720w.jpg"></p></li><li><h2 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a><strong>包含关系</strong></h2><p><strong>举例说明：</strong>用户在账号登录过程中，包括输入账号、输入密码、确认登录等操作</p><p><img src="https://pic3.zhimg.com/80/v2-d5d0914418cbeb28d987f7f2673febd2_720w.jpg"></p></li><li><h2 id="拓展关系"><a href="#拓展关系" class="headerlink" title="拓展关系"></a><strong>拓展关系</strong></h2><p>举例说明：用户在登录过程中忘记了密码</p><p><img src="https://pic4.zhimg.com/80/v2-e05e2ae3afe5ffea1836352c547f3c13_720w.jpg"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring MVC企业面试题</title>
    <link href="/2022/05/14/Spring%20MVC%E4%BC%81%E4%B8%9A%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/05/14/Spring%20MVC%E4%BC%81%E4%B8%9A%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Spring-MVC企业面试题"><a href="#Spring-MVC企业面试题" class="headerlink" title="Spring MVC企业面试题"></a><strong>Spring MVC企业面试题</strong></h1><hr><hr><h2 id="一-简要概述一下Spring-MVC框架？"><a href="#一-简要概述一下Spring-MVC框架？" class="headerlink" title="一.简要概述一下Spring MVC框架？"></a>一.简要概述一下Spring MVC框架？</h2><p>Spring MVC 是 Spring 提供的一个基于 MVC 设计模式的轻量级 Web 开发框架，本质上相当于 Servlet。<br>Spring MVC 角色划分清晰，分工明细。由于 Spring MVC 本身就是 Spring 框架的一部分，可以说和 Spring 框架是无缝集成。性能方面具有先天的优越性，是当今业界最主流的 Web 开发框架，最热门的开发技能。</p><h2 id="二-介绍一下MVC设计模式？"><a href="#二-介绍一下MVC设计模式？" class="headerlink" title="二.介绍一下MVC设计模式？"></a>二.介绍一下MVC设计模式？</h2><p>MVC 设计模式一般指 MVC 框架，M（Model）指数据模型层，V（View）指视图层，C（Controller）指控制层。使用 MVC 的目的是将 M 和 V 的实现代码分离，使同一个程序可以有不同的表现形式。其中，View 的定义比较清晰，就是用户界面。<br><img src="http://c.biancheng.net/uploads/allimg/210705/1130462557-1.png" alt="spring+jsp+servlet"></p><h2 id="三-请举例通过一个demo建立简单的spring-mvc程序？"><a href="#三-请举例通过一个demo建立简单的spring-mvc程序？" class="headerlink" title="三 请举例通过一个demo建立简单的spring mvc程序？"></a>三 请举例通过一个demo建立简单的spring mvc程序？</h2><p>创建步骤</p><ol><li>创建 Web 应用并引入 JAR 包，本教程 Spring 使用版本为 5.2.3</li></ol><figure class="highlight java"><figcaption><span><?xml version</span></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;web-app xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>    xmlns=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> xmlns:web=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><br>    xsi:schemaLocation=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span><br>    version=<span class="hljs-string">&quot;3.0&quot;</span>&gt;<br>    &lt;display-name&gt;springMVC&lt;/display-name&gt;<br>    &lt;!-- 部署 DispatcherServlet --&gt;<br>    &lt;servlet&gt;<br>        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;<br>        &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">DispatcherServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">        &lt;!-- 表示容器再启动时立即加载<span class="hljs-title">servlet</span> --&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">load</span>-<span class="hljs-title">on</span>-<span class="hljs-title">startup</span>&gt;1&lt;/<span class="hljs-title">load</span>-<span class="hljs-title">on</span>-<span class="hljs-title">startup</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">springmvc</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">        &lt;!-- 处理所有<span class="hljs-title">URL</span> --&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">web</span>-<span class="hljs-title">app</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Spring MVC 配置：在 web.xml 中配置 Servlet，创建 Spring MVC 的配置文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">在 WEB-INF 目录下创建 springmvc-servlet.xml 文件，如下所示。<br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;</span><br><span class="hljs-string">        http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br>    &lt;!-- LoginController控制器类，映射到<span class="hljs-string">&quot;/login&quot;</span> --&gt;<br>    &lt;bean name=<span class="hljs-string">&quot;/login&quot;</span><br>          <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;net.biancheng.controller.LoginController&quot;</span>/&gt;<br>    &lt;!-- LoginController控制器类，映射到<span class="hljs-string">&quot;/register&quot;</span> --&gt;<br>    &lt;bean name=<span class="hljs-string">&quot;/register&quot;</span><br>          <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;net.biancheng.controller.RegisterController&quot;</span>/&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure></li><li>创建 Controller（处理请求的控制器）</li><li>创建 View（本教程使用 JSP 作为视图）</li><li>部署运行</li></ol><h2 id="四-介绍一下Spring-MVC视图解析器（ViewResolver）？"><a href="#四-介绍一下Spring-MVC视图解析器（ViewResolver）？" class="headerlink" title="四 介绍一下Spring MVC视图解析器（ViewResolver）？"></a>四 介绍一下Spring MVC视图解析器（ViewResolver）？</h2><p>视图解析器（ViewResolver）是 Spring MVC 的重要组成部分，负责将逻辑视图名解析为具体的视图对象。<br>Spring MVC 提供了很多视图解析类，其中每一项都对应 Java Web 应用中特定的某些视图技术。下面介绍一些常用的视图解析类。</p><ol><li>URLBasedViewResolver<br>UrlBasedViewResolver 通过 prefix 属性指定前缀，suffix 属性指定后缀。当 ModelAndView 对象返回具体的 View 名称时，它会将前缀 prefix 和后缀 suffix 与具体的视图名称拼接，得到一个视图资源文件的具体加载路径，从而加载真正的视图文件并反馈给用户。<br>使用 UrlBasedViewResolver 除了要配置前缀和后缀属性之外，还需要配置“viewClass”，表示解析成哪种视图。示例代码如下。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;</span>&gt;            <br> &lt;property name=<span class="hljs-string">&quot;viewClass&quot;</span> value=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>/&gt; &lt;!--不能省略--&gt;<br> &lt;!--前缀--&gt;<br> &lt;property name=<span class="hljs-string">&quot;prefix&quot;</span> value=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;<br> &lt;!--后缀--&gt;<br> &lt;property name=<span class="hljs-string">&quot;suffix&quot;</span> value=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;  <br> &lt;/bean&gt;<br></code></pre></td></tr></table></figure>上述 viewClass 值为 InternalResourceViewResolver，它用来展示 JSP 页面。如果需要使用 jstl 标签展示数据，将 viewClass 属性值指定为 JstlView 即可。</li><li>InternalResourceViewResolver</li></ol><h2 id="五-介绍一下Spring-MVC执行流程？"><a href="#五-介绍一下Spring-MVC执行流程？" class="headerlink" title="五 介绍一下Spring MVC执行流程？"></a>五 介绍一下Spring MVC执行流程？</h2><p><img src="http://c.biancheng.net/uploads/allimg/210705/1139441444-0.png" alt="Spring MVC执行流程"><br>SpringMVC 的执行流程如下。</p><ol><li>用户点击某个请求路径，发起一个 HTTP request 请求，该请求会被提交到 DispatcherServlet（前端控制器）；</li><li>由 DispatcherServlet 请求一个或多个 HandlerMapping（处理器映射器），并返回一个执行链（HandlerExecutionChain）。</li><li>DispatcherServlet 将执行链返回的 Handler 信息发送给 HandlerAdapter（处理器适配器）；</li><li>HandlerAdapter 根据 Handler 信息找到并执行相应的 Handler（常称为 Controller）；</li><li>Handler 执行完毕后会返回给 HandlerAdapter 一个 ModelAndView 对象（Spring MVC的底层对象，包括 Model 数据模型和 View 视图信息）；</li><li>HandlerAdapter 接收到 ModelAndView 对象后，将其返回给 DispatcherServlet ；</li><li>DispatcherServlet 接收到 ModelAndView 对象后，会请求 ViewResolver（视图解析器）对视图进行解析；</li><li>ViewResolver 根据 View 信息匹配到相应的视图结果，并返回给 DispatcherServlet；</li><li>DispatcherServlet 接收到具体的 View 视图后，进行视图渲染，将 Model 中的模型数据填充到 View 视图中的 request 域，生成最终的 View（视图）；</li><li>视图负责将结果显示到浏览器（客户端）。</li></ol><h2 id="六-介绍一下Spring-MVC-Controller和-RequestMapping注解？"><a href="#六-介绍一下Spring-MVC-Controller和-RequestMapping注解？" class="headerlink" title="六 介绍一下Spring MVC @Controller和@RequestMapping注解？"></a>六 介绍一下Spring MVC @Controller和@RequestMapping注解？</h2><ol><li>Controller注解<br>@Controller 注解用于声明某类的实例是一个控制器。例如，在 net.biancheng.controller 包中创建控制器类 IndexController，示例代码如下。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">package</span> net.biancheng.controller;<br>   <span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br>   <span class="hljs-meta">@Controller</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> </span>&#123;<br>    <span class="hljs-comment">// 处理请求的方法</span><br>   &#125;<br><span class="hljs-number">2.</span> RequestMapping注解<br>   一个控制器内有多个处理请求的方法，如 UserController 里通常有增加用户、修改用户信息、删除指定用户、根据条件获取用户列表等。每个方法负责不同的请求操作，而 <span class="hljs-meta">@RequestMapping</span> 就负责将请求映射到对应的控制器方法上。<br>   在基于注解的控制器类中可以为每个请求编写对应的处理方法。使用 <span class="hljs-meta">@RequestMapping</span> 注解将请求与处理方法一 一对应即可。<br>   <span class="hljs-meta">@RequestMapping</span> 注解可用于类或方法上。用于类上，表示类中的所有响应请求的方法都以该地址作为父路径。<br><br>## 七 说说Spring MVC传递参数的几种方式？<br>Spring MVC Controller 接收请求参数的方式有很多种，有的适合 get 请求方式，有的适合 post 请求方式，有的两者都适合。主要有以下几种方式：<br><span class="hljs-number">1.</span> 通过实体 Bean 接收请求参数<br><span class="hljs-number">2.</span> 通过处理方法的形参接收请求参数<br><span class="hljs-number">3.</span> 通过 HttpServletRequest 接收请求参数<br><span class="hljs-number">4.</span> 通过 <span class="hljs-meta">@PathVariable</span> 接收 URL 中的请求参数<br><span class="hljs-number">5.</span> 通过 <span class="hljs-meta">@RequestParam</span> 接收请求参数<br><span class="hljs-number">6.</span> 通过 <span class="hljs-meta">@ModelAttribute</span> 接收请求参数<br><br>## 八 叙述一下Spring MVC重定向和转发？它们是怎么实现的？<br>Spring MVC 请求方式分为转发、重定向 <span class="hljs-number">2</span> 种，分别使用 forward 和 redirect 关键字在 controller 层进行处理。<br>在 Spring MVC 框架中，重定向与转发的示例代码如下：<br>```java <br><span class="hljs-keyword">package</span> net.biancheng.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//转发到一个请求方法（同一个控制器类可以省略/index/）</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/index/isLogin&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/isLogin&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">isLogin</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//重定向到一个请求方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index/isRegister&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/isRegister&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">isRegister</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//转发到一个视图</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;register&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="九-说说Spring-MVC-Autowired和-Service注解？"><a href="#九-说说Spring-MVC-Autowired和-Service注解？" class="headerlink" title="九 说说Spring MVC @Autowired和@Service注解？"></a>九 说说Spring MVC @Autowired和@Service注解？</h2><p>将依赖注入到 Spring MVC 控制器时需要用到 @Autowired 和 @Service 注解。<br>@Autowired 注解属于 org.springframework.beans.factory. annotation 包，可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。<br>@Service 注解属于 org.springframework.stereotype 包，会将标注类自动注册到 Spring 容器中。<br>在配置文件中需要添加 <component-scan> 元素来扫描依赖基本包。<br>&lt;context:component-scan base-package=”net.biancheng.service”/&gt;</component-scan></p><h2 id="十-说说Spring-MVC-ModelAttribute注解？"><a href="#十-说说Spring-MVC-ModelAttribute注解？" class="headerlink" title="十 说说Spring MVC @ModelAttribute注解？"></a>十 说说Spring MVC @ModelAttribute注解？</h2><p>在 Controller 中使用 @ModelAttribute 时，有以下几种应用情况。</p><ol><li>应用在方法上<ol><li>应用在无返回值的方法```java package net.biancheng.controller;</li></ol></li></ol><p>import org.springframework.stereotype.Controller;<br>import org.springframework.ui.Model;<br>import org.springframework.web.bind.annotation.ModelAttribute;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;</p><p>@Controller<br>public class ModelAttributeController {<br>    // 方法无返回值<br>    @ModelAttribute<br>    public void myModel(@RequestParam(required = false) String name, Model model) {<br>        model.addAttribute(“name”, name);<br>    }</p><pre><code>@RequestMapping(value = &quot;/model&quot;)public String model() &#123;    return &quot;index&quot;;&#125;</code></pre><p>}<br>2. 应用在有返回值的方法</p><p>   ```java package net.biancheng.controller;</p><p>import org.springframework.stereotype.Controller;<br>import org.springframework.ui.Model;<br>import org.springframework.web.bind.annotation.ModelAttribute;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;</p><p>@Controller<br>public class ModelAttributeController {<br>    // 方法有返回值<br>    @ModelAttribute(“name”)<br>    public String myModel(@RequestParam(required = false) String name) {</p><pre><code>    return name;&#125;@RequestMapping(value = &quot;/model&quot;)public String model() &#123;    return &quot;index&quot;;&#125;</code></pre><p>}<br>2. 应用在方法的参数上<br>    @ModelAttribute 注解在方法的参数上，调用方法时，模型的值会被注入。这在实际使用时非常简单，常用于将表单属性映射到模型对象。<br>3. 应用在方法上，并且方法也使用了 @RequestMapping<br>   @ModelAttribute 和 @RequestMapping 注解同时应用在方法上时，有以下作用：</p><ol><li>方法的返回值会存入到 Model 对象中，key 为 ModelAttribute 的 value 属性值。</li><li>方法的返回值不再是方法的访问路径，访问路径会变为 @RequestMapping 的 value 值，例如：@RequestMapping(value = “/index”) 跳转的页面是 index.jsp 页面。<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>InternalResourceViewResolver 为“内部资源视图解析器”，是日常开发中最常用的视图解    析器类型。它是 URLBasedViewResolver 的子类，拥有 URLBasedViewResolver 的一切特性。<br>    使用 InternalResourceViewResolver 视图解析时，无需再单独指定 viewClass 属性。示例代码如下。<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;<br> &lt;property name=<span class="hljs-string">&quot;viewClass&quot;</span> value=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>/&gt; &lt;!--可以省略--&gt;<br> &lt;!--前缀--&gt;<br> &lt;property name=<span class="hljs-string">&quot;prefix&quot;</span> value=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;<br> &lt;!--后缀--&gt;<br> &lt;property name=<span class="hljs-string">&quot;suffix&quot;</span> value=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;  <br> &lt;/bean&gt;<br></code></pre></td></tr></table></figure><br>3. FreeMarkerViewResolver<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>FreeMarkerViewResolver 最终会解析逻辑视图配置，返回 freemarker 模板。不需要指定 viewClass 属性。<br>   FreeMarkerViewResolver 配置如下。<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;</span>&gt;    &lt;property name=<span class="hljs-string">&quot;prefix&quot;</span> value=<span class="hljs-string">&quot;fm_&quot;</span>/&gt;    &lt;property name=<span class="hljs-string">&quot;suffix&quot;</span> value=<span class="hljs-string">&quot;.ftl&quot;</span>/&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><br><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>spring MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC:文件上传和下载功能</title>
    <link href="/2022/05/14/SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2022/05/14/SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC-文件上传和下载功能"><a href="#SpringMVC-文件上传和下载功能" class="headerlink" title="SpringMVC:文件上传和下载功能"></a>SpringMVC:文件上传和下载功能</h1><p>前言<br>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。<br>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><hr><ol><li><h2 id="对表单中的-enctype-属性做个详细的说明："><a href="#对表单中的-enctype-属性做个详细的说明：" class="headerlink" title="对表单中的 enctype 属性做个详细的说明："></a>对表单中的 enctype 属性做个详细的说明：</h2><ul><li><p>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</p></li><li><p>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</p></li><li><p>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ul><li><p>1.导入文件上传的jar包，commons-fileupload ， <a href="https://so.csdn.net/so/search?q=Maven&spm=1001.2101.3001.7020">Maven</a>会自动帮我们导入他的依赖包 commons-io包；</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--文件上传--&gt;<br>&lt;dependency&gt;<br>   &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;<br>   &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;<br>   &lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.3</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!--servlet-api导入高版本的--&gt;<br>&lt;dependency&gt;<br>   &lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>   &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;<br>   &lt;version&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>2.配置bean：multipartResolver<br>代码如下（示例）：<br>【注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>CommonsMultipartFile 的 常用方法：</p><p>String getOriginalFilename()：获取上传文件的原名</p><p>InputStream getInputStream()：获取文件流</p><p>void transferTo(File dest)：将上传文件保存到一个目录文件中</p></li><li><p>3.编写前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>4.Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br>   <span class="hljs-comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span><br>   <span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>​ <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span><br>   String uploadFileName = file.getOriginalFilename();<br><br>   <span class="hljs-comment">//如果文件名为空，直接回到首页！</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(uploadFileName))&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>  &#125;<br>   System.out.println(<span class="hljs-string">&quot;上传文件名 : &quot;</span>+uploadFileName);<br><br>   <span class="hljs-comment">//上传路径保存设置</span><br>   String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>   <span class="hljs-comment">//如果路径不存在，创建一个</span><br>   File realPath = <span class="hljs-keyword">new</span> File(path);<br>   <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>       realPath.mkdir();<br>  &#125;<br>   System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>   InputStream is = file.getInputStream(); <span class="hljs-comment">//文件输入流</span><br>   OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span><br><br>   <span class="hljs-comment">//读取写出</span><br>   <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>   <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>       os.write(buffer,<span class="hljs-number">0</span>,len);<br>       os.flush();<br>  &#125;<br>   os.close();<br>   is.close();<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><h2 id="采用file-Transto-来保存上传的文件"><a href="#采用file-Transto-来保存上传的文件" class="headerlink" title="采用file.Transto 来保存上传的文件"></a>采用file.Transto 来保存上传的文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* 采用file.Transto 来保存上传的文件</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String  <span class="hljs-title">fileUpload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>   <span class="hljs-comment">//上传路径保存设置</span><br>   String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>   File realPath = <span class="hljs-keyword">new</span> File(path);<br>   <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>       realPath.mkdir();<br>  &#125;<br>   <span class="hljs-comment">//上传文件地址</span><br>   System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>   <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br>   file.transferTo(<span class="hljs-keyword">new</span> File(realPath +<span class="hljs-string">&quot;/&quot;</span>+ file.getOriginalFilename()));<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>文件下载步骤：</p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/download&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downloads</span><span class="hljs-params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>   <span class="hljs-comment">//要下载的图片地址</span><br>   String  path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>   String  fileName = <span class="hljs-string">&quot;基础语法.jpg&quot;</span>;<br><br>   <span class="hljs-comment">//1、设置response 响应头</span><br>   response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span><br>   response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">//字符编码</span><br>   response.setContentType(<span class="hljs-string">&quot;multipart/form-data&quot;</span>); <span class="hljs-comment">//二进制传输数据</span><br>   <span class="hljs-comment">//设置响应头</span><br>   response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<br>           <span class="hljs-string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>   File file = <span class="hljs-keyword">new</span> File(path,fileName);<br>   <span class="hljs-comment">//2、 读取文件--输入流</span><br>   InputStream input=<span class="hljs-keyword">new</span> FileInputStream(file);<br>   <span class="hljs-comment">//3、 写出文件--输出流</span><br>   OutputStream out = response.getOutputStream();<br><br>   <span class="hljs-keyword">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>   <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>   <span class="hljs-comment">//4、执行 写出操作</span><br>   <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>)&#123;<br>       out.write(buff, <span class="hljs-number">0</span>, index);<br>       out.flush();<br>  &#125;<br>   out.close();<br>   input.close();<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>————————————————<br>版权声明：本文为CSDN博主「南风<span class="hljs-number">1789</span>」的原创文章，遵循CC <span class="hljs-number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/southwindpass/article/details/113980739</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>spring MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客相关问题</title>
    <link href="/2022/05/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><ol><li><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g   <span class="hljs-comment"># 生成页面</span><br>hexo d   <span class="hljs-comment"># 部署发布</span><br></code></pre></td></tr></table></figure></li><li><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: Hello World <span class="hljs-comment"># 标题</span><br>date: 2019/3/26 hh:mm:ss <span class="hljs-comment"># 时间</span><br>categories: <span class="hljs-comment"># 分类</span><br>- Diary<br>tags: <span class="hljs-comment"># 标签</span><br>- PS3<br>- Games<br>---<br><br>摘要<br>&lt;!--more--&gt;<br>正文<br></code></pre></td></tr></table></figure></li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客建设</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lanTingXu</title>
    <link href="/2021/10/10/lanTingXu/"/>
    <url>/2021/10/10/lanTingXu/</url>
    
    <content type="html"><![CDATA[<p><img src="/.com//Blog\source_posts\lanTingXu\image-20211010100401310.png"></p><p><img src="/.com//Blog\source_posts\lanTingXu\th.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>大二生涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>想写一手好字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/25/hello-world/"/>
    <url>/2021/09/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
